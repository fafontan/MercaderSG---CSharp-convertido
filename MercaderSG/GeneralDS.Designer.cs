// ------------------------------------------------------------------------------
// <auto-generated>
// Este código fue generado por una herramienta.
// Versión de runtime:4.0.30319.18051
// 
// Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
// se vuelve a generar el código.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using Microsoft.VisualBasic.CompilerServices;

namespace MercaderSG
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("GeneralDS")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class GeneralDS : DataSet
    {
        private ClienteDataTable tableCliente;
        private Detalle_RemitoNVDataTable tableDetalle_RemitoNV;
        private Nota_PedidoDataTable tableNota_Pedido;
        private Nota_VentaDataTable tableNota_Venta;
        private ProductoDataTable tableProducto;
        private ProveedorDataTable tableProveedor;
        private Tel_CliDataTable tableTel_Cli;
        private Tel_ProvDataTable tableTel_Prov;
        private LocalidadDataTable tableLocalidad;
        private Detalle_NotaVentaDataTable tableDetalle_NotaVenta;
        private Remito_NotaVentaDataTable tableRemito_NotaVenta;
        private Detalle_NotaPedidoDataTable tableDetalle_NotaPedido;
        private DataRelation relationFK_PRODUCTOCODPROD_Detalle_remitonv;
        private DataRelation relationFK_CODPROV_Nota_Pedido;
        private DataRelation relationFK_CODCLI_Nota_Venta;
        private DataRelation relationFK_CODPROV_TelProv;
        private DataRelation relationFK_CODLOC_Clientes;
        private DataRelation relationFK_CODLOC_Proveedor;
        private DataRelation relationFK_CODCLI_TelCli;
        private DataRelation relationFK_CODNOT_Detalle_NotaVenta;
        private DataRelation relationFK_CODPROD_Detalle_NotaVenta;
        private DataRelation relationFK_REMITONOTAVENTA_Detalle_remitonv;
        private DataRelation relationFK_NOTAVENTACODNOT_remito_notaventa;
        private DataRelation relationFK_Remito_NotaVenta_Cliente;
        private DataRelation relationFK_CODNOT_Detalle_NotaPedido;
        private DataRelation relationFK_CODPROD_Detalle_NotaPedido;
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public GeneralDS() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected GeneralDS(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context) == true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }

            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["Cliente"] is object)
                {
                    base.Tables.Add(new ClienteDataTable(ds.Tables["Cliente"]));
                }

                if (ds.Tables["Detalle_RemitoNV"] is object)
                {
                    base.Tables.Add(new Detalle_RemitoNVDataTable(ds.Tables["Detalle_RemitoNV"]));
                }

                if (ds.Tables["Nota_Pedido"] is object)
                {
                    base.Tables.Add(new Nota_PedidoDataTable(ds.Tables["Nota_Pedido"]));
                }

                if (ds.Tables["Nota_Venta"] is object)
                {
                    base.Tables.Add(new Nota_VentaDataTable(ds.Tables["Nota_Venta"]));
                }

                if (ds.Tables["Producto"] is object)
                {
                    base.Tables.Add(new ProductoDataTable(ds.Tables["Producto"]));
                }

                if (ds.Tables["Proveedor"] is object)
                {
                    base.Tables.Add(new ProveedorDataTable(ds.Tables["Proveedor"]));
                }

                if (ds.Tables["Tel_Cli"] is object)
                {
                    base.Tables.Add(new Tel_CliDataTable(ds.Tables["Tel_Cli"]));
                }

                if (ds.Tables["Tel_Prov"] is object)
                {
                    base.Tables.Add(new Tel_ProvDataTable(ds.Tables["Tel_Prov"]));
                }

                if (ds.Tables["Localidad"] is object)
                {
                    base.Tables.Add(new LocalidadDataTable(ds.Tables["Localidad"]));
                }

                if (ds.Tables["Detalle_NotaVenta"] is object)
                {
                    base.Tables.Add(new Detalle_NotaVentaDataTable(ds.Tables["Detalle_NotaVenta"]));
                }

                if (ds.Tables["Remito_NotaVenta"] is object)
                {
                    base.Tables.Add(new Remito_NotaVentaDataTable(ds.Tables["Remito_NotaVenta"]));
                }

                if (ds.Tables["Detalle_NotaPedido"] is object)
                {
                    base.Tables.Add(new Detalle_NotaPedidoDataTable(ds.Tables["Detalle_NotaPedido"]));
                }

                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }

            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ClienteDataTable Cliente
        {
            get
            {
                return tableCliente;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Detalle_RemitoNVDataTable Detalle_RemitoNV
        {
            get
            {
                return tableDetalle_RemitoNV;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Nota_PedidoDataTable Nota_Pedido
        {
            get
            {
                return tableNota_Pedido;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Nota_VentaDataTable Nota_Venta
        {
            get
            {
                return tableNota_Venta;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProductoDataTable Producto
        {
            get
            {
                return tableProducto;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProveedorDataTable Proveedor
        {
            get
            {
                return tableProveedor;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Tel_CliDataTable Tel_Cli
        {
            get
            {
                return tableTel_Cli;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Tel_ProvDataTable Tel_Prov
        {
            get
            {
                return tableTel_Prov;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LocalidadDataTable Localidad
        {
            get
            {
                return tableLocalidad;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Detalle_NotaVentaDataTable Detalle_NotaVenta
        {
            get
            {
                return tableDetalle_NotaVenta;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Remito_NotaVentaDataTable Remito_NotaVenta
        {
            get
            {
                return tableRemito_NotaVenta;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Detalle_NotaPedidoDataTable Detalle_NotaPedido
        {
            get
            {
                return tableDetalle_NotaPedido;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }

            set
            {
                _schemaSerializationMode = value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override DataSet Clone()
        {
            GeneralDS cln = (GeneralDS)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["Cliente"] is object)
                {
                    base.Tables.Add(new ClienteDataTable(ds.Tables["Cliente"]));
                }

                if (ds.Tables["Detalle_RemitoNV"] is object)
                {
                    base.Tables.Add(new Detalle_RemitoNVDataTable(ds.Tables["Detalle_RemitoNV"]));
                }

                if (ds.Tables["Nota_Pedido"] is object)
                {
                    base.Tables.Add(new Nota_PedidoDataTable(ds.Tables["Nota_Pedido"]));
                }

                if (ds.Tables["Nota_Venta"] is object)
                {
                    base.Tables.Add(new Nota_VentaDataTable(ds.Tables["Nota_Venta"]));
                }

                if (ds.Tables["Producto"] is object)
                {
                    base.Tables.Add(new ProductoDataTable(ds.Tables["Producto"]));
                }

                if (ds.Tables["Proveedor"] is object)
                {
                    base.Tables.Add(new ProveedorDataTable(ds.Tables["Proveedor"]));
                }

                if (ds.Tables["Tel_Cli"] is object)
                {
                    base.Tables.Add(new Tel_CliDataTable(ds.Tables["Tel_Cli"]));
                }

                if (ds.Tables["Tel_Prov"] is object)
                {
                    base.Tables.Add(new Tel_ProvDataTable(ds.Tables["Tel_Prov"]));
                }

                if (ds.Tables["Localidad"] is object)
                {
                    base.Tables.Add(new LocalidadDataTable(ds.Tables["Localidad"]));
                }

                if (ds.Tables["Detalle_NotaVenta"] is object)
                {
                    base.Tables.Add(new Detalle_NotaVentaDataTable(ds.Tables["Detalle_NotaVenta"]));
                }

                if (ds.Tables["Remito_NotaVenta"] is object)
                {
                    base.Tables.Add(new Remito_NotaVentaDataTable(ds.Tables["Remito_NotaVenta"]));
                }

                if (ds.Tables["Detalle_NotaPedido"] is object)
                {
                    base.Tables.Add(new Detalle_NotaPedidoDataTable(ds.Tables["Detalle_NotaPedido"]));
                }

                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tableCliente = (ClienteDataTable)base.Tables["Cliente"];
            if (initTable == true)
            {
                if (tableCliente is object)
                {
                    tableCliente.InitVars();
                }
            }

            tableDetalle_RemitoNV = (Detalle_RemitoNVDataTable)base.Tables["Detalle_RemitoNV"];
            if (initTable == true)
            {
                if (tableDetalle_RemitoNV is object)
                {
                    tableDetalle_RemitoNV.InitVars();
                }
            }

            tableNota_Pedido = (Nota_PedidoDataTable)base.Tables["Nota_Pedido"];
            if (initTable == true)
            {
                if (tableNota_Pedido is object)
                {
                    tableNota_Pedido.InitVars();
                }
            }

            tableNota_Venta = (Nota_VentaDataTable)base.Tables["Nota_Venta"];
            if (initTable == true)
            {
                if (tableNota_Venta is object)
                {
                    tableNota_Venta.InitVars();
                }
            }

            tableProducto = (ProductoDataTable)base.Tables["Producto"];
            if (initTable == true)
            {
                if (tableProducto is object)
                {
                    tableProducto.InitVars();
                }
            }

            tableProveedor = (ProveedorDataTable)base.Tables["Proveedor"];
            if (initTable == true)
            {
                if (tableProveedor is object)
                {
                    tableProveedor.InitVars();
                }
            }

            tableTel_Cli = (Tel_CliDataTable)base.Tables["Tel_Cli"];
            if (initTable == true)
            {
                if (tableTel_Cli is object)
                {
                    tableTel_Cli.InitVars();
                }
            }

            tableTel_Prov = (Tel_ProvDataTable)base.Tables["Tel_Prov"];
            if (initTable == true)
            {
                if (tableTel_Prov is object)
                {
                    tableTel_Prov.InitVars();
                }
            }

            tableLocalidad = (LocalidadDataTable)base.Tables["Localidad"];
            if (initTable == true)
            {
                if (tableLocalidad is object)
                {
                    tableLocalidad.InitVars();
                }
            }

            tableDetalle_NotaVenta = (Detalle_NotaVentaDataTable)base.Tables["Detalle_NotaVenta"];
            if (initTable == true)
            {
                if (tableDetalle_NotaVenta is object)
                {
                    tableDetalle_NotaVenta.InitVars();
                }
            }

            tableRemito_NotaVenta = (Remito_NotaVentaDataTable)base.Tables["Remito_NotaVenta"];
            if (initTable == true)
            {
                if (tableRemito_NotaVenta is object)
                {
                    tableRemito_NotaVenta.InitVars();
                }
            }

            tableDetalle_NotaPedido = (Detalle_NotaPedidoDataTable)base.Tables["Detalle_NotaPedido"];
            if (initTable == true)
            {
                if (tableDetalle_NotaPedido is object)
                {
                    tableDetalle_NotaPedido.InitVars();
                }
            }

            relationFK_PRODUCTOCODPROD_Detalle_remitonv = Relations["FK_PRODUCTOCODPROD_Detalle_remitonv"];
            relationFK_CODPROV_Nota_Pedido = Relations["FK_CODPROV_Nota_Pedido"];
            relationFK_CODCLI_Nota_Venta = Relations["FK_CODCLI_Nota_Venta"];
            relationFK_CODPROV_TelProv = Relations["FK_CODPROV_TelProv"];
            relationFK_CODLOC_Clientes = Relations["FK_CODLOC_Clientes"];
            relationFK_CODLOC_Proveedor = Relations["FK_CODLOC_Proveedor"];
            relationFK_CODCLI_TelCli = Relations["FK_CODCLI_TelCli"];
            relationFK_CODNOT_Detalle_NotaVenta = Relations["FK_CODNOT_Detalle_NotaVenta"];
            relationFK_CODPROD_Detalle_NotaVenta = Relations["FK_CODPROD_Detalle_NotaVenta"];
            relationFK_REMITONOTAVENTA_Detalle_remitonv = Relations["FK_REMITONOTAVENTA_Detalle_remitonv"];
            relationFK_NOTAVENTACODNOT_remito_notaventa = Relations["FK_NOTAVENTACODNOT_remito_notaventa"];
            relationFK_Remito_NotaVenta_Cliente = Relations["FK_Remito_NotaVenta_Cliente"];
            relationFK_CODNOT_Detalle_NotaPedido = Relations["FK_CODNOT_Detalle_NotaPedido"];
            relationFK_CODPROD_Detalle_NotaPedido = Relations["FK_CODPROD_Detalle_NotaPedido"];
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass()
        {
            DataSetName = "GeneralDS";
            Prefix = "";
            Namespace = "http://tempuri.org/GeneralDS.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
            tableCliente = new ClienteDataTable();
            base.Tables.Add(tableCliente);
            tableDetalle_RemitoNV = new Detalle_RemitoNVDataTable();
            base.Tables.Add(tableDetalle_RemitoNV);
            tableNota_Pedido = new Nota_PedidoDataTable();
            base.Tables.Add(tableNota_Pedido);
            tableNota_Venta = new Nota_VentaDataTable();
            base.Tables.Add(tableNota_Venta);
            tableProducto = new ProductoDataTable();
            base.Tables.Add(tableProducto);
            tableProveedor = new ProveedorDataTable();
            base.Tables.Add(tableProveedor);
            tableTel_Cli = new Tel_CliDataTable();
            base.Tables.Add(tableTel_Cli);
            tableTel_Prov = new Tel_ProvDataTable();
            base.Tables.Add(tableTel_Prov);
            tableLocalidad = new LocalidadDataTable();
            base.Tables.Add(tableLocalidad);
            tableDetalle_NotaVenta = new Detalle_NotaVentaDataTable();
            base.Tables.Add(tableDetalle_NotaVenta);
            tableRemito_NotaVenta = new Remito_NotaVentaDataTable();
            base.Tables.Add(tableRemito_NotaVenta);
            tableDetalle_NotaPedido = new Detalle_NotaPedidoDataTable();
            base.Tables.Add(tableDetalle_NotaPedido);
            relationFK_PRODUCTOCODPROD_Detalle_remitonv = new DataRelation("FK_PRODUCTOCODPROD_Detalle_remitonv", new DataColumn[] { tableProducto.CodProdColumn }, new DataColumn[] { tableDetalle_RemitoNV.Producto_CodProdColumn }, false);
            Relations.Add(relationFK_PRODUCTOCODPROD_Detalle_remitonv);
            relationFK_CODPROV_Nota_Pedido = new DataRelation("FK_CODPROV_Nota_Pedido", new DataColumn[] { tableProveedor.CodProvColumn }, new DataColumn[] { tableNota_Pedido.Proveedor_CodProvColumn }, false);
            Relations.Add(relationFK_CODPROV_Nota_Pedido);
            relationFK_CODCLI_Nota_Venta = new DataRelation("FK_CODCLI_Nota_Venta", new DataColumn[] { tableCliente.CodCliColumn }, new DataColumn[] { tableNota_Venta.Cliente_CodCliColumn }, false);
            Relations.Add(relationFK_CODCLI_Nota_Venta);
            relationFK_CODPROV_TelProv = new DataRelation("FK_CODPROV_TelProv", new DataColumn[] { tableProveedor.CodProvColumn }, new DataColumn[] { tableTel_Prov.Proveedor_CodProvColumn }, false);
            Relations.Add(relationFK_CODPROV_TelProv);
            relationFK_CODLOC_Clientes = new DataRelation("FK_CODLOC_Clientes", new DataColumn[] { tableLocalidad.CodLocColumn }, new DataColumn[] { tableCliente.Localidad_CodLocColumn }, false);
            Relations.Add(relationFK_CODLOC_Clientes);
            relationFK_CODLOC_Proveedor = new DataRelation("FK_CODLOC_Proveedor", new DataColumn[] { tableLocalidad.CodLocColumn }, new DataColumn[] { tableProveedor.Localidad_CodLocColumn }, false);
            Relations.Add(relationFK_CODLOC_Proveedor);
            relationFK_CODCLI_TelCli = new DataRelation("FK_CODCLI_TelCli", new DataColumn[] { tableCliente.CodCliColumn }, new DataColumn[] { tableTel_Cli.Cliente_CodCliColumn }, false);
            Relations.Add(relationFK_CODCLI_TelCli);
            relationFK_CODNOT_Detalle_NotaVenta = new DataRelation("FK_CODNOT_Detalle_NotaVenta", new DataColumn[] { tableNota_Venta.CodNotColumn }, new DataColumn[] { tableDetalle_NotaVenta.Nota_Venta_CodNotColumn }, false);
            Relations.Add(relationFK_CODNOT_Detalle_NotaVenta);
            relationFK_CODPROD_Detalle_NotaVenta = new DataRelation("FK_CODPROD_Detalle_NotaVenta", new DataColumn[] { tableProducto.CodProdColumn }, new DataColumn[] { tableDetalle_NotaVenta.Producto_CodProdColumn }, false);
            Relations.Add(relationFK_CODPROD_Detalle_NotaVenta);
            relationFK_REMITONOTAVENTA_Detalle_remitonv = new DataRelation("FK_REMITONOTAVENTA_Detalle_remitonv", new DataColumn[] { tableRemito_NotaVenta.CodRemitoColumn }, new DataColumn[] { tableDetalle_RemitoNV.Remito_NotaVenta_CodRemitoColumn }, false);
            Relations.Add(relationFK_REMITONOTAVENTA_Detalle_remitonv);
            relationFK_NOTAVENTACODNOT_remito_notaventa = new DataRelation("FK_NOTAVENTACODNOT_remito_notaventa", new DataColumn[] { tableNota_Venta.CodNotColumn }, new DataColumn[] { tableRemito_NotaVenta.Nota_Venta_CodNotColumn }, false);
            Relations.Add(relationFK_NOTAVENTACODNOT_remito_notaventa);
            relationFK_Remito_NotaVenta_Cliente = new DataRelation("FK_Remito_NotaVenta_Cliente", new DataColumn[] { tableCliente.CodCliColumn }, new DataColumn[] { tableRemito_NotaVenta.Cliente_CodCliColumn }, false);
            Relations.Add(relationFK_Remito_NotaVenta_Cliente);
            relationFK_CODNOT_Detalle_NotaPedido = new DataRelation("FK_CODNOT_Detalle_NotaPedido", new DataColumn[] { tableNota_Pedido.CodNotColumn }, new DataColumn[] { tableDetalle_NotaPedido.Nota_Pedido_CodNotColumn }, false);
            Relations.Add(relationFK_CODNOT_Detalle_NotaPedido);
            relationFK_CODPROD_Detalle_NotaPedido = new DataRelation("FK_CODPROD_Detalle_NotaPedido", new DataColumn[] { tableProducto.CodProdColumn }, new DataColumn[] { tableDetalle_NotaPedido.Producto_CodProdColumn }, false);
            Relations.Add(relationFK_CODPROD_Detalle_NotaPedido);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeCliente()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDetalle_RemitoNV()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeNota_Pedido()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeNota_Venta()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeProducto()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeProveedor()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTel_Cli()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTel_Prov()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeLocalidad()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDetalle_NotaVenta()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeRemito_NotaVenta()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDetalle_NotaPedido()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new GeneralDS();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length == s2.Length)
                        {
                            s1.Position = 0L;
                            s2.Position = 0L;
                            while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                            {
                            }

                            if (s1.Position == s1.Length)
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if (s1 is object)
                    {
                        s1.Close();
                    }

                    if (s2 is object)
                    {
                        s2.Close();
                    }
                }
            }

            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ClienteRowChangeEventHandler(object sender, ClienteRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Detalle_RemitoNVRowChangeEventHandler(object sender, Detalle_RemitoNVRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Nota_PedidoRowChangeEventHandler(object sender, Nota_PedidoRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Nota_VentaRowChangeEventHandler(object sender, Nota_VentaRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ProductoRowChangeEventHandler(object sender, ProductoRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ProveedorRowChangeEventHandler(object sender, ProveedorRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Tel_CliRowChangeEventHandler(object sender, Tel_CliRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Tel_ProvRowChangeEventHandler(object sender, Tel_ProvRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void LocalidadRowChangeEventHandler(object sender, LocalidadRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Detalle_NotaVentaRowChangeEventHandler(object sender, Detalle_NotaVentaRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Remito_NotaVentaRowChangeEventHandler(object sender, Remito_NotaVentaRowChangeEvent e);

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void Detalle_NotaPedidoRowChangeEventHandler(object sender, Detalle_NotaPedidoRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class ClienteDataTable : TypedTableBase<ClienteRow>
        {
            private DataColumn columnCodCli;
            private DataColumn columnLocalidad_CodLoc;
            private DataColumn columnCuit;
            private DataColumn columnRazonSocial;
            private DataColumn columnCalle;
            private DataColumn columnNumero;
            private DataColumn columnPiso;
            private DataColumn columnDepartamento;
            private DataColumn columnActivo;
            private DataColumn columnDVH;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteDataTable() : base()
            {
                TableName = "Cliente";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ClienteDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ClienteDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodCliColumn
            {
                get
                {
                    return columnCodCli;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Localidad_CodLocColumn
            {
                get
                {
                    return columnLocalidad_CodLoc;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CuitColumn
            {
                get
                {
                    return columnCuit;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RazonSocialColumn
            {
                get
                {
                    return columnRazonSocial;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CalleColumn
            {
                get
                {
                    return columnCalle;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NumeroColumn
            {
                get
                {
                    return columnNumero;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PisoColumn
            {
                get
                {
                    return columnPiso;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DepartamentoColumn
            {
                get
                {
                    return columnDepartamento;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActivoColumn
            {
                get
                {
                    return columnActivo;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DVHColumn
            {
                get
                {
                    return columnDVH;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow this[int index]
            {
                get
                {
                    return (ClienteRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ClienteRowChangeEventHandler ClienteRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ClienteRowChangeEventHandler ClienteRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ClienteRowChangeEventHandler ClienteRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ClienteRowChangeEventHandler ClienteRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddClienteRow(ClienteRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow AddClienteRow(LocalidadRow parentLocalidadRowByFK_CODLOC_Clientes, string Cuit, string RazonSocial, string Calle, string Numero, string Piso, string Departamento, bool Activo, int DVH)
            {
                ClienteRow rowClienteRow = (ClienteRow)NewRow();
                var columnValuesArray = new object[] { null, null, Cuit, RazonSocial, Calle, Numero, Piso, Departamento, Activo, DVH };
                if (parentLocalidadRowByFK_CODLOC_Clientes is object)
                {
                    columnValuesArray[1] = parentLocalidadRowByFK_CODLOC_Clientes[0];
                }

                rowClienteRow.ItemArray = columnValuesArray;
                Rows.Add(rowClienteRow);
                return rowClienteRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow FindByCodCli(int CodCli)
            {
                return (ClienteRow)Rows.Find(new object[] { CodCli });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                ClienteDataTable cln = (ClienteDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new ClienteDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodCli = Columns["CodCli"];
                columnLocalidad_CodLoc = Columns["Localidad_CodLoc"];
                columnCuit = Columns["Cuit"];
                columnRazonSocial = Columns["RazonSocial"];
                columnCalle = Columns["Calle"];
                columnNumero = Columns["Numero"];
                columnPiso = Columns["Piso"];
                columnDepartamento = Columns["Departamento"];
                columnActivo = Columns["Activo"];
                columnDVH = Columns["DVH"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodCli = new DataColumn("CodCli", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodCli);
                columnLocalidad_CodLoc = new DataColumn("Localidad_CodLoc", typeof(int), null, MappingType.Element);
                Columns.Add(columnLocalidad_CodLoc);
                columnCuit = new DataColumn("Cuit", typeof(string), null, MappingType.Element);
                Columns.Add(columnCuit);
                columnRazonSocial = new DataColumn("RazonSocial", typeof(string), null, MappingType.Element);
                Columns.Add(columnRazonSocial);
                columnCalle = new DataColumn("Calle", typeof(string), null, MappingType.Element);
                Columns.Add(columnCalle);
                columnNumero = new DataColumn("Numero", typeof(string), null, MappingType.Element);
                Columns.Add(columnNumero);
                columnPiso = new DataColumn("Piso", typeof(string), null, MappingType.Element);
                Columns.Add(columnPiso);
                columnDepartamento = new DataColumn("Departamento", typeof(string), null, MappingType.Element);
                Columns.Add(columnDepartamento);
                columnActivo = new DataColumn("Activo", typeof(bool), null, MappingType.Element);
                Columns.Add(columnActivo);
                columnDVH = new DataColumn("DVH", typeof(int), null, MappingType.Element);
                Columns.Add(columnDVH);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodCli }, true));
                columnCodCli.AutoIncrement = true;
                columnCodCli.AutoIncrementSeed = -1;
                columnCodCli.AutoIncrementStep = -1;
                columnCodCli.AllowDBNull = false;
                columnCodCli.ReadOnly = true;
                columnCodCli.Unique = true;
                columnLocalidad_CodLoc.AllowDBNull = false;
                columnCuit.AllowDBNull = false;
                columnCuit.MaxLength = 50;
                columnRazonSocial.AllowDBNull = false;
                columnRazonSocial.MaxLength = 50;
                columnCalle.AllowDBNull = false;
                columnCalle.MaxLength = 50;
                columnNumero.AllowDBNull = false;
                columnNumero.MaxLength = 10;
                columnPiso.MaxLength = 10;
                columnDepartamento.MaxLength = 5;
                columnActivo.AllowDBNull = false;
                columnDVH.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow NewClienteRow()
            {
                return (ClienteRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ClienteRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(ClienteRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (ClienteRowChanged is object)
                {
                    ClienteRowChanged?.Invoke(this, new ClienteRowChangeEvent((ClienteRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (ClienteRowChanging is object)
                {
                    ClienteRowChanging?.Invoke(this, new ClienteRowChangeEvent((ClienteRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (ClienteRowDeleted is object)
                {
                    ClienteRowDeleted?.Invoke(this, new ClienteRowChangeEvent((ClienteRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (ClienteRowDeleting is object)
                {
                    ClienteRowDeleting?.Invoke(this, new ClienteRowChangeEvent((ClienteRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveClienteRow(ClienteRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClienteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Detalle_RemitoNVDataTable : TypedTableBase<Detalle_RemitoNVRow>
        {
            private DataColumn columnRemito_NotaVenta_CodRemito;
            private DataColumn columnProducto_CodProd;
            private DataColumn columnCantidad;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVDataTable() : base()
            {
                TableName = "Detalle_RemitoNV";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Detalle_RemitoNVDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Detalle_RemitoNVDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Remito_NotaVenta_CodRemitoColumn
            {
                get
                {
                    return columnRemito_NotaVenta_CodRemito;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Producto_CodProdColumn
            {
                get
                {
                    return columnProducto_CodProd;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CantidadColumn
            {
                get
                {
                    return columnCantidad;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVRow this[int index]
            {
                get
                {
                    return (Detalle_RemitoNVRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_RemitoNVRowChangeEventHandler Detalle_RemitoNVRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_RemitoNVRowChangeEventHandler Detalle_RemitoNVRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_RemitoNVRowChangeEventHandler Detalle_RemitoNVRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_RemitoNVRowChangeEventHandler Detalle_RemitoNVRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDetalle_RemitoNVRow(Detalle_RemitoNVRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVRow AddDetalle_RemitoNVRow(Remito_NotaVentaRow parentRemito_NotaVentaRowByFK_REMITONOTAVENTA_Detalle_remitonv, ProductoRow parentProductoRowByFK_PRODUCTOCODPROD_Detalle_remitonv, int Cantidad)
            {
                Detalle_RemitoNVRow rowDetalle_RemitoNVRow = (Detalle_RemitoNVRow)NewRow();
                var columnValuesArray = new object[] { null, null, Cantidad };
                if (parentRemito_NotaVentaRowByFK_REMITONOTAVENTA_Detalle_remitonv is object)
                {
                    columnValuesArray[0] = parentRemito_NotaVentaRowByFK_REMITONOTAVENTA_Detalle_remitonv[0];
                }

                if (parentProductoRowByFK_PRODUCTOCODPROD_Detalle_remitonv is object)
                {
                    columnValuesArray[1] = parentProductoRowByFK_PRODUCTOCODPROD_Detalle_remitonv[0];
                }

                rowDetalle_RemitoNVRow.ItemArray = columnValuesArray;
                Rows.Add(rowDetalle_RemitoNVRow);
                return rowDetalle_RemitoNVRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                Detalle_RemitoNVDataTable cln = (Detalle_RemitoNVDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Detalle_RemitoNVDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnRemito_NotaVenta_CodRemito = Columns["Remito_NotaVenta_CodRemito"];
                columnProducto_CodProd = Columns["Producto_CodProd"];
                columnCantidad = Columns["Cantidad"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnRemito_NotaVenta_CodRemito = new DataColumn("Remito_NotaVenta_CodRemito", typeof(int), null, MappingType.Element);
                Columns.Add(columnRemito_NotaVenta_CodRemito);
                columnProducto_CodProd = new DataColumn("Producto_CodProd", typeof(int), null, MappingType.Element);
                Columns.Add(columnProducto_CodProd);
                columnCantidad = new DataColumn("Cantidad", typeof(int), null, MappingType.Element);
                Columns.Add(columnCantidad);
                columnRemito_NotaVenta_CodRemito.AllowDBNull = false;
                columnProducto_CodProd.AllowDBNull = false;
                columnCantidad.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVRow NewDetalle_RemitoNVRow()
            {
                return (Detalle_RemitoNVRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Detalle_RemitoNVRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Detalle_RemitoNVRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Detalle_RemitoNVRowChanged is object)
                {
                    Detalle_RemitoNVRowChanged?.Invoke(this, new Detalle_RemitoNVRowChangeEvent((Detalle_RemitoNVRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Detalle_RemitoNVRowChanging is object)
                {
                    Detalle_RemitoNVRowChanging?.Invoke(this, new Detalle_RemitoNVRowChangeEvent((Detalle_RemitoNVRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Detalle_RemitoNVRowDeleted is object)
                {
                    Detalle_RemitoNVRowDeleted?.Invoke(this, new Detalle_RemitoNVRowChangeEvent((Detalle_RemitoNVRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Detalle_RemitoNVRowDeleting is object)
                {
                    Detalle_RemitoNVRowDeleting?.Invoke(this, new Detalle_RemitoNVRowChangeEvent((Detalle_RemitoNVRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDetalle_RemitoNVRow(Detalle_RemitoNVRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Detalle_RemitoNVDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Nota_PedidoDataTable : TypedTableBase<Nota_PedidoRow>
        {
            private DataColumn columnCodNot;
            private DataColumn columnNro_Nota;
            private DataColumn columnProveedor_CodProv;
            private DataColumn columnFecha;
            private DataColumn columnActivo;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoDataTable() : base()
            {
                TableName = "Nota_Pedido";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Nota_PedidoDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Nota_PedidoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodNotColumn
            {
                get
                {
                    return columnCodNot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Nro_NotaColumn
            {
                get
                {
                    return columnNro_Nota;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Proveedor_CodProvColumn
            {
                get
                {
                    return columnProveedor_CodProv;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FechaColumn
            {
                get
                {
                    return columnFecha;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActivoColumn
            {
                get
                {
                    return columnActivo;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoRow this[int index]
            {
                get
                {
                    return (Nota_PedidoRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Nota_PedidoRowChangeEventHandler Nota_PedidoRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Nota_PedidoRowChangeEventHandler Nota_PedidoRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Nota_PedidoRowChangeEventHandler Nota_PedidoRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Nota_PedidoRowChangeEventHandler Nota_PedidoRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNota_PedidoRow(Nota_PedidoRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoRow AddNota_PedidoRow(string Nro_Nota, ProveedorRow parentProveedorRowByFK_CODPROV_Nota_Pedido, DateTime Fecha, bool Activo)
            {
                Nota_PedidoRow rowNota_PedidoRow = (Nota_PedidoRow)NewRow();
                var columnValuesArray = new object[] { null, Nro_Nota, null, Fecha, Activo };
                if (parentProveedorRowByFK_CODPROV_Nota_Pedido is object)
                {
                    columnValuesArray[2] = parentProveedorRowByFK_CODPROV_Nota_Pedido[0];
                }

                rowNota_PedidoRow.ItemArray = columnValuesArray;
                Rows.Add(rowNota_PedidoRow);
                return rowNota_PedidoRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoRow FindByCodNot(int CodNot)
            {
                return (Nota_PedidoRow)Rows.Find(new object[] { CodNot });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                Nota_PedidoDataTable cln = (Nota_PedidoDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Nota_PedidoDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodNot = Columns["CodNot"];
                columnNro_Nota = Columns["Nro_Nota"];
                columnProveedor_CodProv = Columns["Proveedor_CodProv"];
                columnFecha = Columns["Fecha"];
                columnActivo = Columns["Activo"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodNot = new DataColumn("CodNot", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodNot);
                columnNro_Nota = new DataColumn("Nro_Nota", typeof(string), null, MappingType.Element);
                Columns.Add(columnNro_Nota);
                columnProveedor_CodProv = new DataColumn("Proveedor_CodProv", typeof(int), null, MappingType.Element);
                Columns.Add(columnProveedor_CodProv);
                columnFecha = new DataColumn("Fecha", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnFecha);
                columnActivo = new DataColumn("Activo", typeof(bool), null, MappingType.Element);
                Columns.Add(columnActivo);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodNot }, true));
                columnCodNot.AutoIncrement = true;
                columnCodNot.AutoIncrementSeed = -1;
                columnCodNot.AutoIncrementStep = -1;
                columnCodNot.AllowDBNull = false;
                columnCodNot.ReadOnly = true;
                columnCodNot.Unique = true;
                columnNro_Nota.AllowDBNull = false;
                columnNro_Nota.MaxLength = 50;
                columnProveedor_CodProv.AllowDBNull = false;
                columnFecha.AllowDBNull = false;
                columnActivo.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoRow NewNota_PedidoRow()
            {
                return (Nota_PedidoRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Nota_PedidoRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Nota_PedidoRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Nota_PedidoRowChanged is object)
                {
                    Nota_PedidoRowChanged?.Invoke(this, new Nota_PedidoRowChangeEvent((Nota_PedidoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Nota_PedidoRowChanging is object)
                {
                    Nota_PedidoRowChanging?.Invoke(this, new Nota_PedidoRowChangeEvent((Nota_PedidoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Nota_PedidoRowDeleted is object)
                {
                    Nota_PedidoRowDeleted?.Invoke(this, new Nota_PedidoRowChangeEvent((Nota_PedidoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Nota_PedidoRowDeleting is object)
                {
                    Nota_PedidoRowDeleting?.Invoke(this, new Nota_PedidoRowChangeEvent((Nota_PedidoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveNota_PedidoRow(Nota_PedidoRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Nota_PedidoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Nota_VentaDataTable : TypedTableBase<Nota_VentaRow>
        {
            private DataColumn columnCodNot;
            private DataColumn columnNro_Nota;
            private DataColumn columnCliente_CodCli;
            private DataColumn columnFecha;
            private DataColumn columnActivo;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaDataTable() : base()
            {
                TableName = "Nota_Venta";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Nota_VentaDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Nota_VentaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodNotColumn
            {
                get
                {
                    return columnCodNot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Nro_NotaColumn
            {
                get
                {
                    return columnNro_Nota;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Cliente_CodCliColumn
            {
                get
                {
                    return columnCliente_CodCli;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FechaColumn
            {
                get
                {
                    return columnFecha;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActivoColumn
            {
                get
                {
                    return columnActivo;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRow this[int index]
            {
                get
                {
                    return (Nota_VentaRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Nota_VentaRowChangeEventHandler Nota_VentaRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Nota_VentaRowChangeEventHandler Nota_VentaRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Nota_VentaRowChangeEventHandler Nota_VentaRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Nota_VentaRowChangeEventHandler Nota_VentaRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddNota_VentaRow(Nota_VentaRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRow AddNota_VentaRow(string Nro_Nota, ClienteRow parentClienteRowByFK_CODCLI_Nota_Venta, DateTime Fecha, bool Activo)
            {
                Nota_VentaRow rowNota_VentaRow = (Nota_VentaRow)NewRow();
                var columnValuesArray = new object[] { null, Nro_Nota, null, Fecha, Activo };
                if (parentClienteRowByFK_CODCLI_Nota_Venta is object)
                {
                    columnValuesArray[2] = parentClienteRowByFK_CODCLI_Nota_Venta[0];
                }

                rowNota_VentaRow.ItemArray = columnValuesArray;
                Rows.Add(rowNota_VentaRow);
                return rowNota_VentaRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRow FindByCodNot(int CodNot)
            {
                return (Nota_VentaRow)Rows.Find(new object[] { CodNot });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                Nota_VentaDataTable cln = (Nota_VentaDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Nota_VentaDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodNot = Columns["CodNot"];
                columnNro_Nota = Columns["Nro_Nota"];
                columnCliente_CodCli = Columns["Cliente_CodCli"];
                columnFecha = Columns["Fecha"];
                columnActivo = Columns["Activo"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodNot = new DataColumn("CodNot", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodNot);
                columnNro_Nota = new DataColumn("Nro_Nota", typeof(string), null, MappingType.Element);
                Columns.Add(columnNro_Nota);
                columnCliente_CodCli = new DataColumn("Cliente_CodCli", typeof(int), null, MappingType.Element);
                Columns.Add(columnCliente_CodCli);
                columnFecha = new DataColumn("Fecha", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnFecha);
                columnActivo = new DataColumn("Activo", typeof(bool), null, MappingType.Element);
                Columns.Add(columnActivo);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodNot }, true));
                columnCodNot.AutoIncrement = true;
                columnCodNot.AutoIncrementSeed = -1;
                columnCodNot.AutoIncrementStep = -1;
                columnCodNot.AllowDBNull = false;
                columnCodNot.ReadOnly = true;
                columnCodNot.Unique = true;
                columnNro_Nota.AllowDBNull = false;
                columnNro_Nota.MaxLength = 50;
                columnCliente_CodCli.AllowDBNull = false;
                columnFecha.AllowDBNull = false;
                columnActivo.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRow NewNota_VentaRow()
            {
                return (Nota_VentaRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Nota_VentaRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Nota_VentaRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Nota_VentaRowChanged is object)
                {
                    Nota_VentaRowChanged?.Invoke(this, new Nota_VentaRowChangeEvent((Nota_VentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Nota_VentaRowChanging is object)
                {
                    Nota_VentaRowChanging?.Invoke(this, new Nota_VentaRowChangeEvent((Nota_VentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Nota_VentaRowDeleted is object)
                {
                    Nota_VentaRowDeleted?.Invoke(this, new Nota_VentaRowChangeEvent((Nota_VentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Nota_VentaRowDeleting is object)
                {
                    Nota_VentaRowDeleting?.Invoke(this, new Nota_VentaRowChangeEvent((Nota_VentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveNota_VentaRow(Nota_VentaRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Nota_VentaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class ProductoDataTable : TypedTableBase<ProductoRow>
        {
            private DataColumn columnCodProd;
            private DataColumn columnNombre;
            private DataColumn columnDescripcion;
            private DataColumn columnCantidad;
            private DataColumn columnSector;
            private DataColumn columnActivo;
            private DataColumn columnDVH;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoDataTable() : base()
            {
                TableName = "Producto";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProductoDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ProductoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodProdColumn
            {
                get
                {
                    return columnCodProd;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NombreColumn
            {
                get
                {
                    return columnNombre;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DescripcionColumn
            {
                get
                {
                    return columnDescripcion;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CantidadColumn
            {
                get
                {
                    return columnCantidad;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn SectorColumn
            {
                get
                {
                    return columnSector;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActivoColumn
            {
                get
                {
                    return columnActivo;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DVHColumn
            {
                get
                {
                    return columnDVH;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRow this[int index]
            {
                get
                {
                    return (ProductoRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProductoRowChangeEventHandler ProductoRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProductoRowChangeEventHandler ProductoRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProductoRowChangeEventHandler ProductoRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProductoRowChangeEventHandler ProductoRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddProductoRow(ProductoRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRow AddProductoRow(string Nombre, string Descripcion, int Cantidad, string Sector, bool Activo, int DVH)
            {
                ProductoRow rowProductoRow = (ProductoRow)NewRow();
                var columnValuesArray = new object[] { null, Nombre, Descripcion, Cantidad, Sector, Activo, DVH };
                rowProductoRow.ItemArray = columnValuesArray;
                Rows.Add(rowProductoRow);
                return rowProductoRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRow FindByCodProd(int CodProd)
            {
                return (ProductoRow)Rows.Find(new object[] { CodProd });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                ProductoDataTable cln = (ProductoDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new ProductoDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodProd = Columns["CodProd"];
                columnNombre = Columns["Nombre"];
                columnDescripcion = Columns["Descripcion"];
                columnCantidad = Columns["Cantidad"];
                columnSector = Columns["Sector"];
                columnActivo = Columns["Activo"];
                columnDVH = Columns["DVH"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodProd = new DataColumn("CodProd", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodProd);
                columnNombre = new DataColumn("Nombre", typeof(string), null, MappingType.Element);
                Columns.Add(columnNombre);
                columnDescripcion = new DataColumn("Descripcion", typeof(string), null, MappingType.Element);
                Columns.Add(columnDescripcion);
                columnCantidad = new DataColumn("Cantidad", typeof(int), null, MappingType.Element);
                Columns.Add(columnCantidad);
                columnSector = new DataColumn("Sector", typeof(string), null, MappingType.Element);
                Columns.Add(columnSector);
                columnActivo = new DataColumn("Activo", typeof(bool), null, MappingType.Element);
                Columns.Add(columnActivo);
                columnDVH = new DataColumn("DVH", typeof(int), null, MappingType.Element);
                Columns.Add(columnDVH);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodProd }, true));
                columnCodProd.AutoIncrement = true;
                columnCodProd.AutoIncrementSeed = -1;
                columnCodProd.AutoIncrementStep = -1;
                columnCodProd.AllowDBNull = false;
                columnCodProd.ReadOnly = true;
                columnCodProd.Unique = true;
                columnNombre.AllowDBNull = false;
                columnNombre.MaxLength = 50;
                columnDescripcion.AllowDBNull = false;
                columnDescripcion.MaxLength = 100;
                columnCantidad.AllowDBNull = false;
                columnSector.AllowDBNull = false;
                columnSector.MaxLength = 50;
                columnActivo.AllowDBNull = false;
                columnDVH.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRow NewProductoRow()
            {
                return (ProductoRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ProductoRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(ProductoRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (ProductoRowChanged is object)
                {
                    ProductoRowChanged?.Invoke(this, new ProductoRowChangeEvent((ProductoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (ProductoRowChanging is object)
                {
                    ProductoRowChanging?.Invoke(this, new ProductoRowChangeEvent((ProductoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (ProductoRowDeleted is object)
                {
                    ProductoRowDeleted?.Invoke(this, new ProductoRowChangeEvent((ProductoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (ProductoRowDeleting is object)
                {
                    ProductoRowDeleting?.Invoke(this, new ProductoRowChangeEvent((ProductoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveProductoRow(ProductoRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProductoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class ProveedorDataTable : TypedTableBase<ProveedorRow>
        {
            private DataColumn columnCodProv;
            private DataColumn columnLocalidad_CodLoc;
            private DataColumn columnCuit;
            private DataColumn columnRazonSocial;
            private DataColumn columnCorreoElectronico;
            private DataColumn columnCalle;
            private DataColumn columnNumero;
            private DataColumn columnPiso;
            private DataColumn columnDepartamento;
            private DataColumn columnActivo;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorDataTable() : base()
            {
                TableName = "Proveedor";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProveedorDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ProveedorDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodProvColumn
            {
                get
                {
                    return columnCodProv;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Localidad_CodLocColumn
            {
                get
                {
                    return columnLocalidad_CodLoc;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CuitColumn
            {
                get
                {
                    return columnCuit;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn RazonSocialColumn
            {
                get
                {
                    return columnRazonSocial;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CorreoElectronicoColumn
            {
                get
                {
                    return columnCorreoElectronico;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CalleColumn
            {
                get
                {
                    return columnCalle;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NumeroColumn
            {
                get
                {
                    return columnNumero;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PisoColumn
            {
                get
                {
                    return columnPiso;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DepartamentoColumn
            {
                get
                {
                    return columnDepartamento;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn ActivoColumn
            {
                get
                {
                    return columnActivo;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRow this[int index]
            {
                get
                {
                    return (ProveedorRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProveedorRowChangeEventHandler ProveedorRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProveedorRowChangeEventHandler ProveedorRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProveedorRowChangeEventHandler ProveedorRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ProveedorRowChangeEventHandler ProveedorRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddProveedorRow(ProveedorRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRow AddProveedorRow(LocalidadRow parentLocalidadRowByFK_CODLOC_Proveedor, string Cuit, string RazonSocial, string CorreoElectronico, string Calle, string Numero, string Piso, string Departamento, bool Activo)
            {
                ProveedorRow rowProveedorRow = (ProveedorRow)NewRow();
                var columnValuesArray = new object[] { null, null, Cuit, RazonSocial, CorreoElectronico, Calle, Numero, Piso, Departamento, Activo };
                if (parentLocalidadRowByFK_CODLOC_Proveedor is object)
                {
                    columnValuesArray[1] = parentLocalidadRowByFK_CODLOC_Proveedor[0];
                }

                rowProveedorRow.ItemArray = columnValuesArray;
                Rows.Add(rowProveedorRow);
                return rowProveedorRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRow FindByCodProv(int CodProv)
            {
                return (ProveedorRow)Rows.Find(new object[] { CodProv });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                ProveedorDataTable cln = (ProveedorDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new ProveedorDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodProv = Columns["CodProv"];
                columnLocalidad_CodLoc = Columns["Localidad_CodLoc"];
                columnCuit = Columns["Cuit"];
                columnRazonSocial = Columns["RazonSocial"];
                columnCorreoElectronico = Columns["CorreoElectronico"];
                columnCalle = Columns["Calle"];
                columnNumero = Columns["Numero"];
                columnPiso = Columns["Piso"];
                columnDepartamento = Columns["Departamento"];
                columnActivo = Columns["Activo"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodProv = new DataColumn("CodProv", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodProv);
                columnLocalidad_CodLoc = new DataColumn("Localidad_CodLoc", typeof(int), null, MappingType.Element);
                Columns.Add(columnLocalidad_CodLoc);
                columnCuit = new DataColumn("Cuit", typeof(string), null, MappingType.Element);
                Columns.Add(columnCuit);
                columnRazonSocial = new DataColumn("RazonSocial", typeof(string), null, MappingType.Element);
                Columns.Add(columnRazonSocial);
                columnCorreoElectronico = new DataColumn("CorreoElectronico", typeof(string), null, MappingType.Element);
                Columns.Add(columnCorreoElectronico);
                columnCalle = new DataColumn("Calle", typeof(string), null, MappingType.Element);
                Columns.Add(columnCalle);
                columnNumero = new DataColumn("Numero", typeof(string), null, MappingType.Element);
                Columns.Add(columnNumero);
                columnPiso = new DataColumn("Piso", typeof(string), null, MappingType.Element);
                Columns.Add(columnPiso);
                columnDepartamento = new DataColumn("Departamento", typeof(string), null, MappingType.Element);
                Columns.Add(columnDepartamento);
                columnActivo = new DataColumn("Activo", typeof(bool), null, MappingType.Element);
                Columns.Add(columnActivo);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodProv }, true));
                columnCodProv.AutoIncrement = true;
                columnCodProv.AutoIncrementSeed = -1;
                columnCodProv.AutoIncrementStep = -1;
                columnCodProv.AllowDBNull = false;
                columnCodProv.ReadOnly = true;
                columnCodProv.Unique = true;
                columnLocalidad_CodLoc.AllowDBNull = false;
                columnCuit.AllowDBNull = false;
                columnCuit.MaxLength = 50;
                columnRazonSocial.AllowDBNull = false;
                columnRazonSocial.MaxLength = 50;
                columnCorreoElectronico.AllowDBNull = false;
                columnCorreoElectronico.MaxLength = 50;
                columnCalle.AllowDBNull = false;
                columnCalle.MaxLength = 50;
                columnNumero.AllowDBNull = false;
                columnNumero.MaxLength = 10;
                columnPiso.MaxLength = 10;
                columnDepartamento.MaxLength = 5;
                columnActivo.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRow NewProveedorRow()
            {
                return (ProveedorRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new ProveedorRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(ProveedorRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (ProveedorRowChanged is object)
                {
                    ProveedorRowChanged?.Invoke(this, new ProveedorRowChangeEvent((ProveedorRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (ProveedorRowChanging is object)
                {
                    ProveedorRowChanging?.Invoke(this, new ProveedorRowChangeEvent((ProveedorRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (ProveedorRowDeleted is object)
                {
                    ProveedorRowDeleted?.Invoke(this, new ProveedorRowChangeEvent((ProveedorRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (ProveedorRowDeleting is object)
                {
                    ProveedorRowDeleting?.Invoke(this, new ProveedorRowChangeEvent((ProveedorRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveProveedorRow(ProveedorRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProveedorDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Tel_CliDataTable : TypedTableBase<Tel_CliRow>
        {
            private DataColumn columnCodTel;
            private DataColumn columnCliente_CodCli;
            private DataColumn columnNumero;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliDataTable() : base()
            {
                TableName = "Tel_Cli";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Tel_CliDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Tel_CliDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodTelColumn
            {
                get
                {
                    return columnCodTel;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Cliente_CodCliColumn
            {
                get
                {
                    return columnCliente_CodCli;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NumeroColumn
            {
                get
                {
                    return columnNumero;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliRow this[int index]
            {
                get
                {
                    return (Tel_CliRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Tel_CliRowChangeEventHandler Tel_CliRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Tel_CliRowChangeEventHandler Tel_CliRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Tel_CliRowChangeEventHandler Tel_CliRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Tel_CliRowChangeEventHandler Tel_CliRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTel_CliRow(Tel_CliRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliRow AddTel_CliRow(ClienteRow parentClienteRowByFK_CODCLI_TelCli, string Numero)
            {
                Tel_CliRow rowTel_CliRow = (Tel_CliRow)NewRow();
                var columnValuesArray = new object[] { null, null, Numero };
                if (parentClienteRowByFK_CODCLI_TelCli is object)
                {
                    columnValuesArray[1] = parentClienteRowByFK_CODCLI_TelCli[0];
                }

                rowTel_CliRow.ItemArray = columnValuesArray;
                Rows.Add(rowTel_CliRow);
                return rowTel_CliRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliRow FindByCodTel(int CodTel)
            {
                return (Tel_CliRow)Rows.Find(new object[] { CodTel });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                Tel_CliDataTable cln = (Tel_CliDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Tel_CliDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodTel = Columns["CodTel"];
                columnCliente_CodCli = Columns["Cliente_CodCli"];
                columnNumero = Columns["Numero"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodTel = new DataColumn("CodTel", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodTel);
                columnCliente_CodCli = new DataColumn("Cliente_CodCli", typeof(int), null, MappingType.Element);
                Columns.Add(columnCliente_CodCli);
                columnNumero = new DataColumn("Numero", typeof(string), null, MappingType.Element);
                Columns.Add(columnNumero);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodTel }, true));
                columnCodTel.AutoIncrement = true;
                columnCodTel.AutoIncrementSeed = -1;
                columnCodTel.AutoIncrementStep = -1;
                columnCodTel.AllowDBNull = false;
                columnCodTel.ReadOnly = true;
                columnCodTel.Unique = true;
                columnCliente_CodCli.AllowDBNull = false;
                columnNumero.AllowDBNull = false;
                columnNumero.MaxLength = 50;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliRow NewTel_CliRow()
            {
                return (Tel_CliRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Tel_CliRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Tel_CliRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Tel_CliRowChanged is object)
                {
                    Tel_CliRowChanged?.Invoke(this, new Tel_CliRowChangeEvent((Tel_CliRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Tel_CliRowChanging is object)
                {
                    Tel_CliRowChanging?.Invoke(this, new Tel_CliRowChangeEvent((Tel_CliRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Tel_CliRowDeleted is object)
                {
                    Tel_CliRowDeleted?.Invoke(this, new Tel_CliRowChangeEvent((Tel_CliRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Tel_CliRowDeleting is object)
                {
                    Tel_CliRowDeleting?.Invoke(this, new Tel_CliRowChangeEvent((Tel_CliRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTel_CliRow(Tel_CliRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Tel_CliDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Tel_ProvDataTable : TypedTableBase<Tel_ProvRow>
        {
            private DataColumn columnCodTel;
            private DataColumn columnProveedor_CodProv;
            private DataColumn columnNumero;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvDataTable() : base()
            {
                TableName = "Tel_Prov";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Tel_ProvDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Tel_ProvDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodTelColumn
            {
                get
                {
                    return columnCodTel;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Proveedor_CodProvColumn
            {
                get
                {
                    return columnProveedor_CodProv;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn NumeroColumn
            {
                get
                {
                    return columnNumero;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvRow this[int index]
            {
                get
                {
                    return (Tel_ProvRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Tel_ProvRowChangeEventHandler Tel_ProvRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Tel_ProvRowChangeEventHandler Tel_ProvRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Tel_ProvRowChangeEventHandler Tel_ProvRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Tel_ProvRowChangeEventHandler Tel_ProvRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTel_ProvRow(Tel_ProvRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvRow AddTel_ProvRow(ProveedorRow parentProveedorRowByFK_CODPROV_TelProv, string Numero)
            {
                Tel_ProvRow rowTel_ProvRow = (Tel_ProvRow)NewRow();
                var columnValuesArray = new object[] { null, null, Numero };
                if (parentProveedorRowByFK_CODPROV_TelProv is object)
                {
                    columnValuesArray[1] = parentProveedorRowByFK_CODPROV_TelProv[0];
                }

                rowTel_ProvRow.ItemArray = columnValuesArray;
                Rows.Add(rowTel_ProvRow);
                return rowTel_ProvRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvRow FindByCodTel(int CodTel)
            {
                return (Tel_ProvRow)Rows.Find(new object[] { CodTel });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                Tel_ProvDataTable cln = (Tel_ProvDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Tel_ProvDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodTel = Columns["CodTel"];
                columnProveedor_CodProv = Columns["Proveedor_CodProv"];
                columnNumero = Columns["Numero"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodTel = new DataColumn("CodTel", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodTel);
                columnProveedor_CodProv = new DataColumn("Proveedor_CodProv", typeof(int), null, MappingType.Element);
                Columns.Add(columnProveedor_CodProv);
                columnNumero = new DataColumn("Numero", typeof(string), null, MappingType.Element);
                Columns.Add(columnNumero);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodTel }, true));
                columnCodTel.AutoIncrement = true;
                columnCodTel.AutoIncrementSeed = -1;
                columnCodTel.AutoIncrementStep = -1;
                columnCodTel.AllowDBNull = false;
                columnCodTel.ReadOnly = true;
                columnCodTel.Unique = true;
                columnProveedor_CodProv.AllowDBNull = false;
                columnNumero.AllowDBNull = false;
                columnNumero.MaxLength = 50;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvRow NewTel_ProvRow()
            {
                return (Tel_ProvRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Tel_ProvRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Tel_ProvRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Tel_ProvRowChanged is object)
                {
                    Tel_ProvRowChanged?.Invoke(this, new Tel_ProvRowChangeEvent((Tel_ProvRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Tel_ProvRowChanging is object)
                {
                    Tel_ProvRowChanging?.Invoke(this, new Tel_ProvRowChangeEvent((Tel_ProvRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Tel_ProvRowDeleted is object)
                {
                    Tel_ProvRowDeleted?.Invoke(this, new Tel_ProvRowChangeEvent((Tel_ProvRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Tel_ProvRowDeleting is object)
                {
                    Tel_ProvRowDeleting?.Invoke(this, new Tel_ProvRowChangeEvent((Tel_ProvRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTel_ProvRow(Tel_ProvRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Tel_ProvDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class LocalidadDataTable : TypedTableBase<LocalidadRow>
        {
            private DataColumn columnCodLoc;
            private DataColumn columnProvincia_CodProvincia;
            private DataColumn columnDescripcion;
            private DataColumn columnCodigoPostal;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadDataTable() : base()
            {
                TableName = "Localidad";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LocalidadDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected LocalidadDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodLocColumn
            {
                get
                {
                    return columnCodLoc;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Provincia_CodProvinciaColumn
            {
                get
                {
                    return columnProvincia_CodProvincia;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn DescripcionColumn
            {
                get
                {
                    return columnDescripcion;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodigoPostalColumn
            {
                get
                {
                    return columnCodigoPostal;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadRow this[int index]
            {
                get
                {
                    return (LocalidadRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LocalidadRowChangeEventHandler LocalidadRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LocalidadRowChangeEventHandler LocalidadRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LocalidadRowChangeEventHandler LocalidadRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event LocalidadRowChangeEventHandler LocalidadRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddLocalidadRow(LocalidadRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadRow AddLocalidadRow(int Provincia_CodProvincia, string Descripcion, string CodigoPostal)
            {
                LocalidadRow rowLocalidadRow = (LocalidadRow)NewRow();
                var columnValuesArray = new object[] { null, Provincia_CodProvincia, Descripcion, CodigoPostal };
                rowLocalidadRow.ItemArray = columnValuesArray;
                Rows.Add(rowLocalidadRow);
                return rowLocalidadRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadRow FindByCodLoc(int CodLoc)
            {
                return (LocalidadRow)Rows.Find(new object[] { CodLoc });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                LocalidadDataTable cln = (LocalidadDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new LocalidadDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodLoc = Columns["CodLoc"];
                columnProvincia_CodProvincia = Columns["Provincia_CodProvincia"];
                columnDescripcion = Columns["Descripcion"];
                columnCodigoPostal = Columns["CodigoPostal"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodLoc = new DataColumn("CodLoc", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodLoc);
                columnProvincia_CodProvincia = new DataColumn("Provincia_CodProvincia", typeof(int), null, MappingType.Element);
                Columns.Add(columnProvincia_CodProvincia);
                columnDescripcion = new DataColumn("Descripcion", typeof(string), null, MappingType.Element);
                Columns.Add(columnDescripcion);
                columnCodigoPostal = new DataColumn("CodigoPostal", typeof(string), null, MappingType.Element);
                Columns.Add(columnCodigoPostal);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodLoc }, true));
                columnCodLoc.AutoIncrement = true;
                columnCodLoc.AutoIncrementSeed = -1;
                columnCodLoc.AutoIncrementStep = -1;
                columnCodLoc.AllowDBNull = false;
                columnCodLoc.ReadOnly = true;
                columnCodLoc.Unique = true;
                columnProvincia_CodProvincia.AllowDBNull = false;
                columnDescripcion.MaxLength = 50;
                columnCodigoPostal.MaxLength = 10;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadRow NewLocalidadRow()
            {
                return (LocalidadRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new LocalidadRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(LocalidadRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (LocalidadRowChanged is object)
                {
                    LocalidadRowChanged?.Invoke(this, new LocalidadRowChangeEvent((LocalidadRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (LocalidadRowChanging is object)
                {
                    LocalidadRowChanging?.Invoke(this, new LocalidadRowChangeEvent((LocalidadRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (LocalidadRowDeleted is object)
                {
                    LocalidadRowDeleted?.Invoke(this, new LocalidadRowChangeEvent((LocalidadRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (LocalidadRowDeleting is object)
                {
                    LocalidadRowDeleting?.Invoke(this, new LocalidadRowChangeEvent((LocalidadRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveLocalidadRow(LocalidadRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LocalidadDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Detalle_NotaVentaDataTable : TypedTableBase<Detalle_NotaVentaRow>
        {
            private DataColumn columnNota_Venta_CodNot;
            private DataColumn columnProducto_CodProd;
            private DataColumn columnPrecio;
            private DataColumn columnCantidad;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaDataTable() : base()
            {
                TableName = "Detalle_NotaVenta";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Detalle_NotaVentaDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Detalle_NotaVentaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Nota_Venta_CodNotColumn
            {
                get
                {
                    return columnNota_Venta_CodNot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Producto_CodProdColumn
            {
                get
                {
                    return columnProducto_CodProd;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PrecioColumn
            {
                get
                {
                    return columnPrecio;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CantidadColumn
            {
                get
                {
                    return columnCantidad;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaRow this[int index]
            {
                get
                {
                    return (Detalle_NotaVentaRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_NotaVentaRowChangeEventHandler Detalle_NotaVentaRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_NotaVentaRowChangeEventHandler Detalle_NotaVentaRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_NotaVentaRowChangeEventHandler Detalle_NotaVentaRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_NotaVentaRowChangeEventHandler Detalle_NotaVentaRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDetalle_NotaVentaRow(Detalle_NotaVentaRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaRow AddDetalle_NotaVentaRow(Nota_VentaRow parentNota_VentaRowByFK_CODNOT_Detalle_NotaVenta, ProductoRow parentProductoRowByFK_CODPROD_Detalle_NotaVenta, string Precio, int Cantidad)
            {
                Detalle_NotaVentaRow rowDetalle_NotaVentaRow = (Detalle_NotaVentaRow)NewRow();
                var columnValuesArray = new object[] { null, null, Precio, Cantidad };
                if (parentNota_VentaRowByFK_CODNOT_Detalle_NotaVenta is object)
                {
                    columnValuesArray[0] = parentNota_VentaRowByFK_CODNOT_Detalle_NotaVenta[0];
                }

                if (parentProductoRowByFK_CODPROD_Detalle_NotaVenta is object)
                {
                    columnValuesArray[1] = parentProductoRowByFK_CODPROD_Detalle_NotaVenta[0];
                }

                rowDetalle_NotaVentaRow.ItemArray = columnValuesArray;
                Rows.Add(rowDetalle_NotaVentaRow);
                return rowDetalle_NotaVentaRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                Detalle_NotaVentaDataTable cln = (Detalle_NotaVentaDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Detalle_NotaVentaDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnNota_Venta_CodNot = Columns["Nota_Venta_CodNot"];
                columnProducto_CodProd = Columns["Producto_CodProd"];
                columnPrecio = Columns["Precio"];
                columnCantidad = Columns["Cantidad"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnNota_Venta_CodNot = new DataColumn("Nota_Venta_CodNot", typeof(int), null, MappingType.Element);
                Columns.Add(columnNota_Venta_CodNot);
                columnProducto_CodProd = new DataColumn("Producto_CodProd", typeof(int), null, MappingType.Element);
                Columns.Add(columnProducto_CodProd);
                columnPrecio = new DataColumn("Precio", typeof(string), null, MappingType.Element);
                Columns.Add(columnPrecio);
                columnCantidad = new DataColumn("Cantidad", typeof(int), null, MappingType.Element);
                Columns.Add(columnCantidad);
                columnNota_Venta_CodNot.AllowDBNull = false;
                columnProducto_CodProd.AllowDBNull = false;
                columnPrecio.AllowDBNull = false;
                columnPrecio.MaxLength = 50;
                columnCantidad.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaRow NewDetalle_NotaVentaRow()
            {
                return (Detalle_NotaVentaRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Detalle_NotaVentaRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Detalle_NotaVentaRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Detalle_NotaVentaRowChanged is object)
                {
                    Detalle_NotaVentaRowChanged?.Invoke(this, new Detalle_NotaVentaRowChangeEvent((Detalle_NotaVentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Detalle_NotaVentaRowChanging is object)
                {
                    Detalle_NotaVentaRowChanging?.Invoke(this, new Detalle_NotaVentaRowChangeEvent((Detalle_NotaVentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Detalle_NotaVentaRowDeleted is object)
                {
                    Detalle_NotaVentaRowDeleted?.Invoke(this, new Detalle_NotaVentaRowChangeEvent((Detalle_NotaVentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Detalle_NotaVentaRowDeleting is object)
                {
                    Detalle_NotaVentaRowDeleting?.Invoke(this, new Detalle_NotaVentaRowChangeEvent((Detalle_NotaVentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDetalle_NotaVentaRow(Detalle_NotaVentaRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Detalle_NotaVentaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Remito_NotaVentaDataTable : TypedTableBase<Remito_NotaVentaRow>
        {
            private DataColumn columnCodRemito;
            private DataColumn columnNota_Venta_CodNot;
            private DataColumn columnNro_Remito;
            private DataColumn columnCliente_CodCli;
            private DataColumn columnFecha;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaDataTable() : base()
            {
                TableName = "Remito_NotaVenta";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Remito_NotaVentaDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Remito_NotaVentaDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CodRemitoColumn
            {
                get
                {
                    return columnCodRemito;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Nota_Venta_CodNotColumn
            {
                get
                {
                    return columnNota_Venta_CodNot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Nro_RemitoColumn
            {
                get
                {
                    return columnNro_Remito;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Cliente_CodCliColumn
            {
                get
                {
                    return columnCliente_CodCli;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn FechaColumn
            {
                get
                {
                    return columnFecha;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRow this[int index]
            {
                get
                {
                    return (Remito_NotaVentaRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Remito_NotaVentaRowChangeEventHandler Remito_NotaVentaRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Remito_NotaVentaRowChangeEventHandler Remito_NotaVentaRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Remito_NotaVentaRowChangeEventHandler Remito_NotaVentaRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Remito_NotaVentaRowChangeEventHandler Remito_NotaVentaRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddRemito_NotaVentaRow(Remito_NotaVentaRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRow AddRemito_NotaVentaRow(Nota_VentaRow parentNota_VentaRowByFK_NOTAVENTACODNOT_remito_notaventa, string Nro_Remito, ClienteRow parentClienteRowByFK_Remito_NotaVenta_Cliente, DateTime Fecha)
            {
                Remito_NotaVentaRow rowRemito_NotaVentaRow = (Remito_NotaVentaRow)NewRow();
                var columnValuesArray = new object[] { null, null, Nro_Remito, null, Fecha };
                if (parentNota_VentaRowByFK_NOTAVENTACODNOT_remito_notaventa is object)
                {
                    columnValuesArray[1] = parentNota_VentaRowByFK_NOTAVENTACODNOT_remito_notaventa[0];
                }

                if (parentClienteRowByFK_Remito_NotaVenta_Cliente is object)
                {
                    columnValuesArray[3] = parentClienteRowByFK_Remito_NotaVenta_Cliente[0];
                }

                rowRemito_NotaVentaRow.ItemArray = columnValuesArray;
                Rows.Add(rowRemito_NotaVentaRow);
                return rowRemito_NotaVentaRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRow FindByCodRemito(int CodRemito)
            {
                return (Remito_NotaVentaRow)Rows.Find(new object[] { CodRemito });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                Remito_NotaVentaDataTable cln = (Remito_NotaVentaDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Remito_NotaVentaDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnCodRemito = Columns["CodRemito"];
                columnNota_Venta_CodNot = Columns["Nota_Venta_CodNot"];
                columnNro_Remito = Columns["Nro_Remito"];
                columnCliente_CodCli = Columns["Cliente_CodCli"];
                columnFecha = Columns["Fecha"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnCodRemito = new DataColumn("CodRemito", typeof(int), null, MappingType.Element);
                Columns.Add(columnCodRemito);
                columnNota_Venta_CodNot = new DataColumn("Nota_Venta_CodNot", typeof(int), null, MappingType.Element);
                Columns.Add(columnNota_Venta_CodNot);
                columnNro_Remito = new DataColumn("Nro_Remito", typeof(string), null, MappingType.Element);
                Columns.Add(columnNro_Remito);
                columnCliente_CodCli = new DataColumn("Cliente_CodCli", typeof(int), null, MappingType.Element);
                Columns.Add(columnCliente_CodCli);
                columnFecha = new DataColumn("Fecha", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnFecha);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCodRemito }, true));
                columnCodRemito.AutoIncrement = true;
                columnCodRemito.AutoIncrementSeed = -1;
                columnCodRemito.AutoIncrementStep = -1;
                columnCodRemito.AllowDBNull = false;
                columnCodRemito.ReadOnly = true;
                columnCodRemito.Unique = true;
                columnNota_Venta_CodNot.AllowDBNull = false;
                columnNro_Remito.AllowDBNull = false;
                columnNro_Remito.MaxLength = 50;
                columnCliente_CodCli.AllowDBNull = false;
                columnFecha.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRow NewRemito_NotaVentaRow()
            {
                return (Remito_NotaVentaRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Remito_NotaVentaRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Remito_NotaVentaRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Remito_NotaVentaRowChanged is object)
                {
                    Remito_NotaVentaRowChanged?.Invoke(this, new Remito_NotaVentaRowChangeEvent((Remito_NotaVentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Remito_NotaVentaRowChanging is object)
                {
                    Remito_NotaVentaRowChanging?.Invoke(this, new Remito_NotaVentaRowChangeEvent((Remito_NotaVentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Remito_NotaVentaRowDeleted is object)
                {
                    Remito_NotaVentaRowDeleted?.Invoke(this, new Remito_NotaVentaRowChangeEvent((Remito_NotaVentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Remito_NotaVentaRowDeleting is object)
                {
                    Remito_NotaVentaRowDeleting?.Invoke(this, new Remito_NotaVentaRowChangeEvent((Remito_NotaVentaRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveRemito_NotaVentaRow(Remito_NotaVentaRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Remito_NotaVentaDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class Detalle_NotaPedidoDataTable : TypedTableBase<Detalle_NotaPedidoRow>
        {
            private DataColumn columnNota_Pedido_CodNot;
            private DataColumn columnProducto_CodProd;
            private DataColumn columnPrecio;
            private DataColumn columnCantidad;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoDataTable() : base()
            {
                TableName = "Detalle_NotaPedido";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Detalle_NotaPedidoDataTable(DataTable table) : base()
            {
                TableName = table.TableName;
                if (table.CaseSensitive != table.DataSet.CaseSensitive)
                {
                    CaseSensitive = table.CaseSensitive;
                }

                if ((table.Locale.ToString() ?? "") != (table.DataSet.Locale.ToString() ?? ""))
                {
                    Locale = table.Locale;
                }

                if ((table.Namespace ?? "") != (table.DataSet.Namespace ?? ""))
                {
                    Namespace = table.Namespace;
                }

                Prefix = table.Prefix;
                MinimumCapacity = table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected Detalle_NotaPedidoDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Nota_Pedido_CodNotColumn
            {
                get
                {
                    return columnNota_Pedido_CodNot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn Producto_CodProdColumn
            {
                get
                {
                    return columnProducto_CodProd;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn PrecioColumn
            {
                get
                {
                    return columnPrecio;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataColumn CantidadColumn
            {
                get
                {
                    return columnCantidad;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoRow this[int index]
            {
                get
                {
                    return (Detalle_NotaPedidoRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_NotaPedidoRowChangeEventHandler Detalle_NotaPedidoRowChanging;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_NotaPedidoRowChangeEventHandler Detalle_NotaPedidoRowChanged;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_NotaPedidoRowChangeEventHandler Detalle_NotaPedidoRowDeleting;
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event Detalle_NotaPedidoRowChangeEventHandler Detalle_NotaPedidoRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDetalle_NotaPedidoRow(Detalle_NotaPedidoRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoRow AddDetalle_NotaPedidoRow(Nota_PedidoRow parentNota_PedidoRowByFK_CODNOT_Detalle_NotaPedido, ProductoRow parentProductoRowByFK_CODPROD_Detalle_NotaPedido, string Precio, int Cantidad)
            {
                Detalle_NotaPedidoRow rowDetalle_NotaPedidoRow = (Detalle_NotaPedidoRow)NewRow();
                var columnValuesArray = new object[] { null, null, Precio, Cantidad };
                if (parentNota_PedidoRowByFK_CODNOT_Detalle_NotaPedido is object)
                {
                    columnValuesArray[0] = parentNota_PedidoRowByFK_CODNOT_Detalle_NotaPedido[0];
                }

                if (parentProductoRowByFK_CODPROD_Detalle_NotaPedido is object)
                {
                    columnValuesArray[1] = parentProductoRowByFK_CODPROD_Detalle_NotaPedido[0];
                }

                rowDetalle_NotaPedidoRow.ItemArray = columnValuesArray;
                Rows.Add(rowDetalle_NotaPedidoRow);
                return rowDetalle_NotaPedidoRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override DataTable Clone()
            {
                Detalle_NotaPedidoDataTable cln = (Detalle_NotaPedidoDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new Detalle_NotaPedidoDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars()
            {
                columnNota_Pedido_CodNot = Columns["Nota_Pedido_CodNot"];
                columnProducto_CodProd = Columns["Producto_CodProd"];
                columnPrecio = Columns["Precio"];
                columnCantidad = Columns["Cantidad"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass()
            {
                columnNota_Pedido_CodNot = new DataColumn("Nota_Pedido_CodNot", typeof(int), null, MappingType.Element);
                Columns.Add(columnNota_Pedido_CodNot);
                columnProducto_CodProd = new DataColumn("Producto_CodProd", typeof(int), null, MappingType.Element);
                Columns.Add(columnProducto_CodProd);
                columnPrecio = new DataColumn("Precio", typeof(string), null, MappingType.Element);
                Columns.Add(columnPrecio);
                columnCantidad = new DataColumn("Cantidad", typeof(int), null, MappingType.Element);
                Columns.Add(columnCantidad);
                columnNota_Pedido_CodNot.AllowDBNull = false;
                columnProducto_CodProd.AllowDBNull = false;
                columnPrecio.AllowDBNull = false;
                columnPrecio.MaxLength = 50;
                columnCantidad.AllowDBNull = false;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoRow NewDetalle_NotaPedidoRow()
            {
                return (Detalle_NotaPedidoRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new Detalle_NotaPedidoRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(Detalle_NotaPedidoRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (Detalle_NotaPedidoRowChanged is object)
                {
                    Detalle_NotaPedidoRowChanged?.Invoke(this, new Detalle_NotaPedidoRowChangeEvent((Detalle_NotaPedidoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (Detalle_NotaPedidoRowChanging is object)
                {
                    Detalle_NotaPedidoRowChanging?.Invoke(this, new Detalle_NotaPedidoRowChangeEvent((Detalle_NotaPedidoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (Detalle_NotaPedidoRowDeleted is object)
                {
                    Detalle_NotaPedidoRowDeleted?.Invoke(this, new Detalle_NotaPedidoRowChangeEvent((Detalle_NotaPedidoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (Detalle_NotaPedidoRowDeleting is object)
                {
                    Detalle_NotaPedidoRowDeleting?.Invoke(this, new Detalle_NotaPedidoRowChangeEvent((Detalle_NotaPedidoRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDetalle_NotaPedidoRow(Detalle_NotaPedidoRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new GeneralDS();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Detalle_NotaPedidoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length == s2.Length)
                            {
                                s1.Position = 0L;
                                s2.Position = 0L;
                                while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                                {
                                }

                                if (s1.Position == s1.Length)
                                {
                                    return type;
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (s1 is object)
                        {
                            s1.Close();
                        }

                        if (s2 is object)
                        {
                            s2.Close();
                        }
                    }
                }

                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class ClienteRow : DataRow
        {
            private ClienteDataTable tableCliente;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ClienteRow(DataRowBuilder rb) : base(rb)
            {
                tableCliente = (ClienteDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodCli
            {
                get
                {
                    return Conversions.ToInteger(this[tableCliente.CodCliColumn]);
                }

                set
                {
                    this[tableCliente.CodCliColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Localidad_CodLoc
            {
                get
                {
                    return Conversions.ToInteger(this[tableCliente.Localidad_CodLocColumn]);
                }

                set
                {
                    this[tableCliente.Localidad_CodLocColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Cuit
            {
                get
                {
                    return Conversions.ToString(this[tableCliente.CuitColumn]);
                }

                set
                {
                    this[tableCliente.CuitColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RazonSocial
            {
                get
                {
                    return Conversions.ToString(this[tableCliente.RazonSocialColumn]);
                }

                set
                {
                    this[tableCliente.RazonSocialColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Calle
            {
                get
                {
                    return Conversions.ToString(this[tableCliente.CalleColumn]);
                }

                set
                {
                    this[tableCliente.CalleColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Numero
            {
                get
                {
                    return Conversions.ToString(this[tableCliente.NumeroColumn]);
                }

                set
                {
                    this[tableCliente.NumeroColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Piso
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableCliente.PisoColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("El valor de la columna 'Piso' de la tabla 'Cliente' es DBNull.", e);
                    }
                }

                set
                {
                    this[tableCliente.PisoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Departamento
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableCliente.DepartamentoColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("El valor de la columna 'Departamento' de la tabla 'Cliente' es DBNull.", e);
                    }
                }

                set
                {
                    this[tableCliente.DepartamentoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Activo
            {
                get
                {
                    return Conversions.ToBoolean(this[tableCliente.ActivoColumn]);
                }

                set
                {
                    this[tableCliente.ActivoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DVH
            {
                get
                {
                    return Conversions.ToInteger(this[tableCliente.DVHColumn]);
                }

                set
                {
                    this[tableCliente.DVHColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadRow LocalidadRow
            {
                get
                {
                    return (LocalidadRow)GetParentRow(Table.ParentRelations["FK_CODLOC_Clientes"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODLOC_Clientes"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPisoNull()
            {
                return IsNull(tableCliente.PisoColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPisoNull()
            {
                this[tableCliente.PisoColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDepartamentoNull()
            {
                return IsNull(tableCliente.DepartamentoColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDepartamentoNull()
            {
                this[tableCliente.DepartamentoColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRow[] GetNota_VentaRows()
            {
                if (Table.ChildRelations["FK_CODCLI_Nota_Venta"] is null)
                {
                    return new Nota_VentaRow[0];
                }
                else
                {
                    return (Nota_VentaRow[])GetChildRows(Table.ChildRelations["FK_CODCLI_Nota_Venta"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliRow[] GetTel_CliRows()
            {
                if (Table.ChildRelations["FK_CODCLI_TelCli"] is null)
                {
                    return new Tel_CliRow[0];
                }
                else
                {
                    return (Tel_CliRow[])GetChildRows(Table.ChildRelations["FK_CODCLI_TelCli"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRow[] GetRemito_NotaVentaRows()
            {
                if (Table.ChildRelations["FK_Remito_NotaVenta_Cliente"] is null)
                {
                    return new Remito_NotaVentaRow[0];
                }
                else
                {
                    return (Remito_NotaVentaRow[])GetChildRows(Table.ChildRelations["FK_Remito_NotaVenta_Cliente"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Detalle_RemitoNVRow : DataRow
        {
            private Detalle_RemitoNVDataTable tableDetalle_RemitoNV;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Detalle_RemitoNVRow(DataRowBuilder rb) : base(rb)
            {
                tableDetalle_RemitoNV = (Detalle_RemitoNVDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Remito_NotaVenta_CodRemito
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_RemitoNV.Remito_NotaVenta_CodRemitoColumn]);
                }

                set
                {
                    this[tableDetalle_RemitoNV.Remito_NotaVenta_CodRemitoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Producto_CodProd
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_RemitoNV.Producto_CodProdColumn]);
                }

                set
                {
                    this[tableDetalle_RemitoNV.Producto_CodProdColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Cantidad
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_RemitoNV.CantidadColumn]);
                }

                set
                {
                    this[tableDetalle_RemitoNV.CantidadColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRow ProductoRow
            {
                get
                {
                    return (ProductoRow)GetParentRow(Table.ParentRelations["FK_PRODUCTOCODPROD_Detalle_remitonv"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_PRODUCTOCODPROD_Detalle_remitonv"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRow Remito_NotaVentaRow
            {
                get
                {
                    return (Remito_NotaVentaRow)GetParentRow(Table.ParentRelations["FK_REMITONOTAVENTA_Detalle_remitonv"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_REMITONOTAVENTA_Detalle_remitonv"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Nota_PedidoRow : DataRow
        {
            private Nota_PedidoDataTable tableNota_Pedido;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Nota_PedidoRow(DataRowBuilder rb) : base(rb)
            {
                tableNota_Pedido = (Nota_PedidoDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodNot
            {
                get
                {
                    return Conversions.ToInteger(this[tableNota_Pedido.CodNotColumn]);
                }

                set
                {
                    this[tableNota_Pedido.CodNotColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Nro_Nota
            {
                get
                {
                    return Conversions.ToString(this[tableNota_Pedido.Nro_NotaColumn]);
                }

                set
                {
                    this[tableNota_Pedido.Nro_NotaColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Proveedor_CodProv
            {
                get
                {
                    return Conversions.ToInteger(this[tableNota_Pedido.Proveedor_CodProvColumn]);
                }

                set
                {
                    this[tableNota_Pedido.Proveedor_CodProvColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime Fecha
            {
                get
                {
                    return Conversions.ToDate(this[tableNota_Pedido.FechaColumn]);
                }

                set
                {
                    this[tableNota_Pedido.FechaColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Activo
            {
                get
                {
                    return Conversions.ToBoolean(this[tableNota_Pedido.ActivoColumn]);
                }

                set
                {
                    this[tableNota_Pedido.ActivoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRow ProveedorRow
            {
                get
                {
                    return (ProveedorRow)GetParentRow(Table.ParentRelations["FK_CODPROV_Nota_Pedido"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODPROV_Nota_Pedido"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoRow[] GetDetalle_NotaPedidoRows()
            {
                if (Table.ChildRelations["FK_CODNOT_Detalle_NotaPedido"] is null)
                {
                    return new Detalle_NotaPedidoRow[0];
                }
                else
                {
                    return (Detalle_NotaPedidoRow[])GetChildRows(Table.ChildRelations["FK_CODNOT_Detalle_NotaPedido"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Nota_VentaRow : DataRow
        {
            private Nota_VentaDataTable tableNota_Venta;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Nota_VentaRow(DataRowBuilder rb) : base(rb)
            {
                tableNota_Venta = (Nota_VentaDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodNot
            {
                get
                {
                    return Conversions.ToInteger(this[tableNota_Venta.CodNotColumn]);
                }

                set
                {
                    this[tableNota_Venta.CodNotColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Nro_Nota
            {
                get
                {
                    return Conversions.ToString(this[tableNota_Venta.Nro_NotaColumn]);
                }

                set
                {
                    this[tableNota_Venta.Nro_NotaColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Cliente_CodCli
            {
                get
                {
                    return Conversions.ToInteger(this[tableNota_Venta.Cliente_CodCliColumn]);
                }

                set
                {
                    this[tableNota_Venta.Cliente_CodCliColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime Fecha
            {
                get
                {
                    return Conversions.ToDate(this[tableNota_Venta.FechaColumn]);
                }

                set
                {
                    this[tableNota_Venta.FechaColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Activo
            {
                get
                {
                    return Conversions.ToBoolean(this[tableNota_Venta.ActivoColumn]);
                }

                set
                {
                    this[tableNota_Venta.ActivoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow ClienteRow
            {
                get
                {
                    return (ClienteRow)GetParentRow(Table.ParentRelations["FK_CODCLI_Nota_Venta"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODCLI_Nota_Venta"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaRow[] GetDetalle_NotaVentaRows()
            {
                if (Table.ChildRelations["FK_CODNOT_Detalle_NotaVenta"] is null)
                {
                    return new Detalle_NotaVentaRow[0];
                }
                else
                {
                    return (Detalle_NotaVentaRow[])GetChildRows(Table.ChildRelations["FK_CODNOT_Detalle_NotaVenta"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRow[] GetRemito_NotaVentaRows()
            {
                if (Table.ChildRelations["FK_NOTAVENTACODNOT_remito_notaventa"] is null)
                {
                    return new Remito_NotaVentaRow[0];
                }
                else
                {
                    return (Remito_NotaVentaRow[])GetChildRows(Table.ChildRelations["FK_NOTAVENTACODNOT_remito_notaventa"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class ProductoRow : DataRow
        {
            private ProductoDataTable tableProducto;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProductoRow(DataRowBuilder rb) : base(rb)
            {
                tableProducto = (ProductoDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodProd
            {
                get
                {
                    return Conversions.ToInteger(this[tableProducto.CodProdColumn]);
                }

                set
                {
                    this[tableProducto.CodProdColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Nombre
            {
                get
                {
                    return Conversions.ToString(this[tableProducto.NombreColumn]);
                }

                set
                {
                    this[tableProducto.NombreColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Descripcion
            {
                get
                {
                    return Conversions.ToString(this[tableProducto.DescripcionColumn]);
                }

                set
                {
                    this[tableProducto.DescripcionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Cantidad
            {
                get
                {
                    return Conversions.ToInteger(this[tableProducto.CantidadColumn]);
                }

                set
                {
                    this[tableProducto.CantidadColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Sector
            {
                get
                {
                    return Conversions.ToString(this[tableProducto.SectorColumn]);
                }

                set
                {
                    this[tableProducto.SectorColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Activo
            {
                get
                {
                    return Conversions.ToBoolean(this[tableProducto.ActivoColumn]);
                }

                set
                {
                    this[tableProducto.ActivoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int DVH
            {
                get
                {
                    return Conversions.ToInteger(this[tableProducto.DVHColumn]);
                }

                set
                {
                    this[tableProducto.DVHColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVRow[] GetDetalle_RemitoNVRows()
            {
                if (Table.ChildRelations["FK_PRODUCTOCODPROD_Detalle_remitonv"] is null)
                {
                    return new Detalle_RemitoNVRow[0];
                }
                else
                {
                    return (Detalle_RemitoNVRow[])GetChildRows(Table.ChildRelations["FK_PRODUCTOCODPROD_Detalle_remitonv"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaRow[] GetDetalle_NotaVentaRows()
            {
                if (Table.ChildRelations["FK_CODPROD_Detalle_NotaVenta"] is null)
                {
                    return new Detalle_NotaVentaRow[0];
                }
                else
                {
                    return (Detalle_NotaVentaRow[])GetChildRows(Table.ChildRelations["FK_CODPROD_Detalle_NotaVenta"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoRow[] GetDetalle_NotaPedidoRows()
            {
                if (Table.ChildRelations["FK_CODPROD_Detalle_NotaPedido"] is null)
                {
                    return new Detalle_NotaPedidoRow[0];
                }
                else
                {
                    return (Detalle_NotaPedidoRow[])GetChildRows(Table.ChildRelations["FK_CODPROD_Detalle_NotaPedido"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class ProveedorRow : DataRow
        {
            private ProveedorDataTable tableProveedor;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ProveedorRow(DataRowBuilder rb) : base(rb)
            {
                tableProveedor = (ProveedorDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodProv
            {
                get
                {
                    return Conversions.ToInteger(this[tableProveedor.CodProvColumn]);
                }

                set
                {
                    this[tableProveedor.CodProvColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Localidad_CodLoc
            {
                get
                {
                    return Conversions.ToInteger(this[tableProveedor.Localidad_CodLocColumn]);
                }

                set
                {
                    this[tableProveedor.Localidad_CodLocColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Cuit
            {
                get
                {
                    return Conversions.ToString(this[tableProveedor.CuitColumn]);
                }

                set
                {
                    this[tableProveedor.CuitColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string RazonSocial
            {
                get
                {
                    return Conversions.ToString(this[tableProveedor.RazonSocialColumn]);
                }

                set
                {
                    this[tableProveedor.RazonSocialColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CorreoElectronico
            {
                get
                {
                    return Conversions.ToString(this[tableProveedor.CorreoElectronicoColumn]);
                }

                set
                {
                    this[tableProveedor.CorreoElectronicoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Calle
            {
                get
                {
                    return Conversions.ToString(this[tableProveedor.CalleColumn]);
                }

                set
                {
                    this[tableProveedor.CalleColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Numero
            {
                get
                {
                    return Conversions.ToString(this[tableProveedor.NumeroColumn]);
                }

                set
                {
                    this[tableProveedor.NumeroColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Piso
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableProveedor.PisoColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("El valor de la columna 'Piso' de la tabla 'Proveedor' es DBNull.", e);
                    }
                }

                set
                {
                    this[tableProveedor.PisoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Departamento
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableProveedor.DepartamentoColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("El valor de la columna 'Departamento' de la tabla 'Proveedor' es DBNull.", e);
                    }
                }

                set
                {
                    this[tableProveedor.DepartamentoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool Activo
            {
                get
                {
                    return Conversions.ToBoolean(this[tableProveedor.ActivoColumn]);
                }

                set
                {
                    this[tableProveedor.ActivoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadRow LocalidadRow
            {
                get
                {
                    return (LocalidadRow)GetParentRow(Table.ParentRelations["FK_CODLOC_Proveedor"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODLOC_Proveedor"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPisoNull()
            {
                return IsNull(tableProveedor.PisoColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPisoNull()
            {
                this[tableProveedor.PisoColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDepartamentoNull()
            {
                return IsNull(tableProveedor.DepartamentoColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDepartamentoNull()
            {
                this[tableProveedor.DepartamentoColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoRow[] GetNota_PedidoRows()
            {
                if (Table.ChildRelations["FK_CODPROV_Nota_Pedido"] is null)
                {
                    return new Nota_PedidoRow[0];
                }
                else
                {
                    return (Nota_PedidoRow[])GetChildRows(Table.ChildRelations["FK_CODPROV_Nota_Pedido"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvRow[] GetTel_ProvRows()
            {
                if (Table.ChildRelations["FK_CODPROV_TelProv"] is null)
                {
                    return new Tel_ProvRow[0];
                }
                else
                {
                    return (Tel_ProvRow[])GetChildRows(Table.ChildRelations["FK_CODPROV_TelProv"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Tel_CliRow : DataRow
        {
            private Tel_CliDataTable tableTel_Cli;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Tel_CliRow(DataRowBuilder rb) : base(rb)
            {
                tableTel_Cli = (Tel_CliDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodTel
            {
                get
                {
                    return Conversions.ToInteger(this[tableTel_Cli.CodTelColumn]);
                }

                set
                {
                    this[tableTel_Cli.CodTelColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Cliente_CodCli
            {
                get
                {
                    return Conversions.ToInteger(this[tableTel_Cli.Cliente_CodCliColumn]);
                }

                set
                {
                    this[tableTel_Cli.Cliente_CodCliColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Numero
            {
                get
                {
                    return Conversions.ToString(this[tableTel_Cli.NumeroColumn]);
                }

                set
                {
                    this[tableTel_Cli.NumeroColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow ClienteRow
            {
                get
                {
                    return (ClienteRow)GetParentRow(Table.ParentRelations["FK_CODCLI_TelCli"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODCLI_TelCli"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Tel_ProvRow : DataRow
        {
            private Tel_ProvDataTable tableTel_Prov;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Tel_ProvRow(DataRowBuilder rb) : base(rb)
            {
                tableTel_Prov = (Tel_ProvDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodTel
            {
                get
                {
                    return Conversions.ToInteger(this[tableTel_Prov.CodTelColumn]);
                }

                set
                {
                    this[tableTel_Prov.CodTelColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Proveedor_CodProv
            {
                get
                {
                    return Conversions.ToInteger(this[tableTel_Prov.Proveedor_CodProvColumn]);
                }

                set
                {
                    this[tableTel_Prov.Proveedor_CodProvColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Numero
            {
                get
                {
                    return Conversions.ToString(this[tableTel_Prov.NumeroColumn]);
                }

                set
                {
                    this[tableTel_Prov.NumeroColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRow ProveedorRow
            {
                get
                {
                    return (ProveedorRow)GetParentRow(Table.ParentRelations["FK_CODPROV_TelProv"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODPROV_TelProv"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class LocalidadRow : DataRow
        {
            private LocalidadDataTable tableLocalidad;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal LocalidadRow(DataRowBuilder rb) : base(rb)
            {
                tableLocalidad = (LocalidadDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodLoc
            {
                get
                {
                    return Conversions.ToInteger(this[tableLocalidad.CodLocColumn]);
                }

                set
                {
                    this[tableLocalidad.CodLocColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Provincia_CodProvincia
            {
                get
                {
                    return Conversions.ToInteger(this[tableLocalidad.Provincia_CodProvinciaColumn]);
                }

                set
                {
                    this[tableLocalidad.Provincia_CodProvinciaColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Descripcion
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableLocalidad.DescripcionColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'Localidad' es DBNull.", e);
                    }
                }

                set
                {
                    this[tableLocalidad.DescripcionColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CodigoPostal
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tableLocalidad.CodigoPostalColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("El valor de la columna 'CodigoPostal' de la tabla 'Localidad' es DBNull.", e);
                    }
                }

                set
                {
                    this[tableLocalidad.CodigoPostalColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDescripcionNull()
            {
                return IsNull(tableLocalidad.DescripcionColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDescripcionNull()
            {
                this[tableLocalidad.DescripcionColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCodigoPostalNull()
            {
                return IsNull(tableLocalidad.CodigoPostalColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCodigoPostalNull()
            {
                this[tableLocalidad.CodigoPostalColumn] = Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow[] GetClienteRows()
            {
                if (Table.ChildRelations["FK_CODLOC_Clientes"] is null)
                {
                    return new ClienteRow[0];
                }
                else
                {
                    return (ClienteRow[])GetChildRows(Table.ChildRelations["FK_CODLOC_Clientes"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRow[] GetProveedorRows()
            {
                if (Table.ChildRelations["FK_CODLOC_Proveedor"] is null)
                {
                    return new ProveedorRow[0];
                }
                else
                {
                    return (ProveedorRow[])GetChildRows(Table.ChildRelations["FK_CODLOC_Proveedor"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Detalle_NotaVentaRow : DataRow
        {
            private Detalle_NotaVentaDataTable tableDetalle_NotaVenta;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Detalle_NotaVentaRow(DataRowBuilder rb) : base(rb)
            {
                tableDetalle_NotaVenta = (Detalle_NotaVentaDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Nota_Venta_CodNot
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_NotaVenta.Nota_Venta_CodNotColumn]);
                }

                set
                {
                    this[tableDetalle_NotaVenta.Nota_Venta_CodNotColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Producto_CodProd
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_NotaVenta.Producto_CodProdColumn]);
                }

                set
                {
                    this[tableDetalle_NotaVenta.Producto_CodProdColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Precio
            {
                get
                {
                    return Conversions.ToString(this[tableDetalle_NotaVenta.PrecioColumn]);
                }

                set
                {
                    this[tableDetalle_NotaVenta.PrecioColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Cantidad
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_NotaVenta.CantidadColumn]);
                }

                set
                {
                    this[tableDetalle_NotaVenta.CantidadColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRow Nota_VentaRow
            {
                get
                {
                    return (Nota_VentaRow)GetParentRow(Table.ParentRelations["FK_CODNOT_Detalle_NotaVenta"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODNOT_Detalle_NotaVenta"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRow ProductoRow
            {
                get
                {
                    return (ProductoRow)GetParentRow(Table.ParentRelations["FK_CODPROD_Detalle_NotaVenta"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODPROD_Detalle_NotaVenta"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Remito_NotaVentaRow : DataRow
        {
            private Remito_NotaVentaDataTable tableRemito_NotaVenta;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Remito_NotaVentaRow(DataRowBuilder rb) : base(rb)
            {
                tableRemito_NotaVenta = (Remito_NotaVentaDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CodRemito
            {
                get
                {
                    return Conversions.ToInteger(this[tableRemito_NotaVenta.CodRemitoColumn]);
                }

                set
                {
                    this[tableRemito_NotaVenta.CodRemitoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Nota_Venta_CodNot
            {
                get
                {
                    return Conversions.ToInteger(this[tableRemito_NotaVenta.Nota_Venta_CodNotColumn]);
                }

                set
                {
                    this[tableRemito_NotaVenta.Nota_Venta_CodNotColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Nro_Remito
            {
                get
                {
                    return Conversions.ToString(this[tableRemito_NotaVenta.Nro_RemitoColumn]);
                }

                set
                {
                    this[tableRemito_NotaVenta.Nro_RemitoColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Cliente_CodCli
            {
                get
                {
                    return Conversions.ToInteger(this[tableRemito_NotaVenta.Cliente_CodCliColumn]);
                }

                set
                {
                    this[tableRemito_NotaVenta.Cliente_CodCliColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DateTime Fecha
            {
                get
                {
                    return Conversions.ToDate(this[tableRemito_NotaVenta.FechaColumn]);
                }

                set
                {
                    this[tableRemito_NotaVenta.FechaColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRow Nota_VentaRow
            {
                get
                {
                    return (Nota_VentaRow)GetParentRow(Table.ParentRelations["FK_NOTAVENTACODNOT_remito_notaventa"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_NOTAVENTACODNOT_remito_notaventa"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow ClienteRow
            {
                get
                {
                    return (ClienteRow)GetParentRow(Table.ParentRelations["FK_Remito_NotaVenta_Cliente"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_Remito_NotaVenta_Cliente"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVRow[] GetDetalle_RemitoNVRows()
            {
                if (Table.ChildRelations["FK_REMITONOTAVENTA_Detalle_remitonv"] is null)
                {
                    return new Detalle_RemitoNVRow[0];
                }
                else
                {
                    return (Detalle_RemitoNVRow[])GetChildRows(Table.ChildRelations["FK_REMITONOTAVENTA_Detalle_remitonv"]);
                }
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class Detalle_NotaPedidoRow : DataRow
        {
            private Detalle_NotaPedidoDataTable tableDetalle_NotaPedido;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal Detalle_NotaPedidoRow(DataRowBuilder rb) : base(rb)
            {
                tableDetalle_NotaPedido = (Detalle_NotaPedidoDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Nota_Pedido_CodNot
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_NotaPedido.Nota_Pedido_CodNotColumn]);
                }

                set
                {
                    this[tableDetalle_NotaPedido.Nota_Pedido_CodNotColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Producto_CodProd
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_NotaPedido.Producto_CodProdColumn]);
                }

                set
                {
                    this[tableDetalle_NotaPedido.Producto_CodProdColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Precio
            {
                get
                {
                    return Conversions.ToString(this[tableDetalle_NotaPedido.PrecioColumn]);
                }

                set
                {
                    this[tableDetalle_NotaPedido.PrecioColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Cantidad
            {
                get
                {
                    return Conversions.ToInteger(this[tableDetalle_NotaPedido.CantidadColumn]);
                }

                set
                {
                    this[tableDetalle_NotaPedido.CantidadColumn] = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoRow Nota_PedidoRow
            {
                get
                {
                    return (Nota_PedidoRow)GetParentRow(Table.ParentRelations["FK_CODNOT_Detalle_NotaPedido"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODNOT_Detalle_NotaPedido"]);
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRow ProductoRow
            {
                get
                {
                    return (ProductoRow)GetParentRow(Table.ParentRelations["FK_CODPROD_Detalle_NotaPedido"]);
                }

                set
                {
                    SetParentRow(value, Table.ParentRelations["FK_CODPROD_Detalle_NotaPedido"]);
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ClienteRowChangeEvent : EventArgs
        {
            private ClienteRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRowChangeEvent(ClienteRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Detalle_RemitoNVRowChangeEvent : EventArgs
        {
            private Detalle_RemitoNVRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVRowChangeEvent(Detalle_RemitoNVRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Nota_PedidoRowChangeEvent : EventArgs
        {
            private Nota_PedidoRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoRowChangeEvent(Nota_PedidoRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Nota_VentaRowChangeEvent : EventArgs
        {
            private Nota_VentaRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRowChangeEvent(Nota_VentaRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ProductoRowChangeEvent : EventArgs
        {
            private ProductoRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRowChangeEvent(ProductoRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ProveedorRowChangeEvent : EventArgs
        {
            private ProveedorRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRowChangeEvent(ProveedorRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Tel_CliRowChangeEvent : EventArgs
        {
            private Tel_CliRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliRowChangeEvent(Tel_CliRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Tel_ProvRowChangeEvent : EventArgs
        {
            private Tel_ProvRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvRowChangeEvent(Tel_ProvRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class LocalidadRowChangeEvent : EventArgs
        {
            private LocalidadRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadRowChangeEvent(LocalidadRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Detalle_NotaVentaRowChangeEvent : EventArgs
        {
            private Detalle_NotaVentaRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaRowChangeEvent(Detalle_NotaVentaRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Remito_NotaVentaRowChangeEvent : EventArgs
        {
            private Remito_NotaVentaRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRowChangeEvent(Remito_NotaVentaRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class Detalle_NotaPedidoRowChangeEvent : EventArgs
        {
            private Detalle_NotaPedidoRow eventRow;
            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoRowChangeEvent(Detalle_NotaPedidoRow row, DataRowAction action) : base()
            {
                eventRow = row;
                eventAction = action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace GeneralDSTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class ClienteTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ClienteTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Cliente";
                tableMapping.ColumnMappings.Add("CodCli", "CodCli");
                tableMapping.ColumnMappings.Add("Localidad_CodLoc", "Localidad_CodLoc");
                tableMapping.ColumnMappings.Add("Cuit", "Cuit");
                tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial");
                tableMapping.ColumnMappings.Add("Calle", "Calle");
                tableMapping.ColumnMappings.Add("Numero", "Numero");
                tableMapping.ColumnMappings.Add("Piso", "Piso");
                tableMapping.ColumnMappings.Add("Departamento", "Departamento");
                tableMapping.ColumnMappings.Add("Activo", "Activo");
                tableMapping.ColumnMappings.Add("DVH", "DVH");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Cliente] WHERE (([CodCli] = @Original_CodCli) AND ([Localidad_" + "CodLoc] = @Original_Localidad_CodLoc) AND ([Cuit] = @Original_Cuit) AND ([RazonS" + "ocial] = @Original_RazonSocial) AND ([Calle] = @Original_Calle) AND ([Numero] = " + "@Original_Numero) AND ((@IsNull_Piso = 1 AND [Piso] IS NULL) OR ([Piso] = @Origi" + "nal_Piso)) AND ((@IsNull_Departamento = 1 AND [Departamento] IS NULL) OR ([Depar" + "tamento] = @Original_Departamento)) AND ([Activo] = @Original_Activo) AND ([DVH]" + " = @Original_DVH))";





                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodCli", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Localidad_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Localidad_CodLoc", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cuit", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Cuit", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RazonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "RazonSocial", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Calle", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Calle", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Piso", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Piso", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Departamento", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Departamento", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DVH", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "DVH", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Cliente] ([Localidad_CodLoc], [Cuit], [RazonSocial], [Calle], " + "[Numero], [Piso], [Departamento], [Activo], [DVH]) VALUES (@Localidad_CodLoc, @C" + "uit, @RazonSocial, @Calle, @Numero, @Piso, @Departamento, @Activo, @DVH);" + '\r' + '\n' + "SELEC" + "T CodCli, Localidad_CodLoc, Cuit, RazonSocial, Calle, Numero, Piso, Departamento" + ", Activo, DVH FROM Cliente WHERE (CodCli = SCOPE_IDENTITY())";



                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Localidad_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Localidad_CodLoc", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cuit", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Cuit", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RazonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "RazonSocial", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Calle", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Calle", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Piso", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Departamento", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DVH", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "DVH", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Cliente] SET [Localidad_CodLoc] = @Localidad_CodLoc, [Cuit] = @Cuit" + ", [RazonSocial] = @RazonSocial, [Calle] = @Calle, [Numero] = @Numero, [Piso] = @" + "Piso, [Departamento] = @Departamento, [Activo] = @Activo, [DVH] = @DVH WHERE (([" + "CodCli] = @Original_CodCli) AND ([Localidad_CodLoc] = @Original_Localidad_CodLoc" + ") AND ([Cuit] = @Original_Cuit) AND ([RazonSocial] = @Original_RazonSocial) AND " + "([Calle] = @Original_Calle) AND ([Numero] = @Original_Numero) AND ((@IsNull_Piso" + " = 1 AND [Piso] IS NULL) OR ([Piso] = @Original_Piso)) AND ((@IsNull_Departament" + "o = 1 AND [Departamento] IS NULL) OR ([Departamento] = @Original_Departamento)) " + "AND ([Activo] = @Original_Activo) AND ([DVH] = @Original_DVH));" + '\r' + '\n' + "SELECT CodCli, " + "Localidad_CodLoc, Cuit, RazonSocial, Calle, Numero, Piso, Departamento, Activo, " + "DVH FROM Cliente WHERE (CodCli = @CodCli)";









                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Localidad_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Localidad_CodLoc", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cuit", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Cuit", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RazonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "RazonSocial", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Calle", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Calle", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Piso", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Departamento", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DVH", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "DVH", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodCli", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Localidad_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Localidad_CodLoc", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cuit", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Cuit", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RazonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "RazonSocial", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Calle", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Calle", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Piso", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Piso", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Departamento", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Departamento", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DVH", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "DVH", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodCli", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodCli", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodCli, Localidad_CodLoc, Cuit, RazonSocial, Calle, Numero, Piso, Departam" + "ento, Activo, DVH FROM dbo.Cliente";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.ClienteDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.ClienteDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.ClienteDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.ClienteDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Cliente");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodCli, int Original_Localidad_CodLoc, string Original_Cuit, string Original_RazonSocial, string Original_Calle, string Original_Numero, string Original_Piso, string Original_Departamento, bool Original_Activo, int Original_DVH)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodCli;
                Adapter.DeleteCommand.Parameters[1].Value = Original_Localidad_CodLoc;
                if (Original_Cuit is null)
                {
                    throw new ArgumentNullException("Original_Cuit");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_Cuit;
                }

                if (Original_RazonSocial is null)
                {
                    throw new ArgumentNullException("Original_RazonSocial");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = Original_RazonSocial;
                }

                if (Original_Calle is null)
                {
                    throw new ArgumentNullException("Original_Calle");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = Original_Calle;
                }

                if (Original_Numero is null)
                {
                    throw new ArgumentNullException("Original_Numero");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[5].Value = Original_Numero;
                }

                if (Original_Piso is null)
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 1;
                    Adapter.DeleteCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[6].Value = 0;
                    Adapter.DeleteCommand.Parameters[7].Value = Original_Piso;
                }

                if (Original_Departamento is null)
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 1;
                    Adapter.DeleteCommand.Parameters[9].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[8].Value = 0;
                    Adapter.DeleteCommand.Parameters[9].Value = Original_Departamento;
                }

                Adapter.DeleteCommand.Parameters[10].Value = Original_Activo;
                Adapter.DeleteCommand.Parameters[11].Value = Original_DVH;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Localidad_CodLoc, string Cuit, string RazonSocial, string Calle, string Numero, string Piso, string Departamento, bool Activo, int DVH)
            {
                Adapter.InsertCommand.Parameters[0].Value = Localidad_CodLoc;
                if (Cuit is null)
                {
                    throw new ArgumentNullException("Cuit");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = Cuit;
                }

                if (RazonSocial is null)
                {
                    throw new ArgumentNullException("RazonSocial");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = RazonSocial;
                }

                if (Calle is null)
                {
                    throw new ArgumentNullException("Calle");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = Calle;
                }

                if (Numero is null)
                {
                    throw new ArgumentNullException("Numero");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = Numero;
                }

                if (Piso is null)
                {
                    Adapter.InsertCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value = Piso;
                }

                if (Departamento is null)
                {
                    Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value = Departamento;
                }

                Adapter.InsertCommand.Parameters[7].Value = Activo;
                Adapter.InsertCommand.Parameters[8].Value = DVH;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Localidad_CodLoc, string Cuit, string RazonSocial, string Calle, string Numero, string Piso, string Departamento, bool Activo, int DVH, int Original_CodCli, int Original_Localidad_CodLoc, string Original_Cuit, string Original_RazonSocial, string Original_Calle, string Original_Numero, string Original_Piso, string Original_Departamento, bool Original_Activo, int Original_DVH, int CodCli)



















            {
                Adapter.UpdateCommand.Parameters[0].Value = Localidad_CodLoc;
                if (Cuit is null)
                {
                    throw new ArgumentNullException("Cuit");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = Cuit;
                }

                if (RazonSocial is null)
                {
                    throw new ArgumentNullException("RazonSocial");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = RazonSocial;
                }

                if (Calle is null)
                {
                    throw new ArgumentNullException("Calle");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = Calle;
                }

                if (Numero is null)
                {
                    throw new ArgumentNullException("Numero");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Numero;
                }

                if (Piso is null)
                {
                    Adapter.UpdateCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = Piso;
                }

                if (Departamento is null)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = Departamento;
                }

                Adapter.UpdateCommand.Parameters[7].Value = Activo;
                Adapter.UpdateCommand.Parameters[8].Value = DVH;
                Adapter.UpdateCommand.Parameters[9].Value = Original_CodCli;
                Adapter.UpdateCommand.Parameters[10].Value = Original_Localidad_CodLoc;
                if (Original_Cuit is null)
                {
                    throw new ArgumentNullException("Original_Cuit");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[11].Value = Original_Cuit;
                }

                if (Original_RazonSocial is null)
                {
                    throw new ArgumentNullException("Original_RazonSocial");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[12].Value = Original_RazonSocial;
                }

                if (Original_Calle is null)
                {
                    throw new ArgumentNullException("Original_Calle");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[13].Value = Original_Calle;
                }

                if (Original_Numero is null)
                {
                    throw new ArgumentNullException("Original_Numero");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[14].Value = Original_Numero;
                }

                if (Original_Piso is null)
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 1;
                    Adapter.UpdateCommand.Parameters[16].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[15].Value = 0;
                    Adapter.UpdateCommand.Parameters[16].Value = Original_Piso;
                }

                if (Original_Departamento is null)
                {
                    Adapter.UpdateCommand.Parameters[17].Value = 1;
                    Adapter.UpdateCommand.Parameters[18].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[17].Value = 0;
                    Adapter.UpdateCommand.Parameters[18].Value = Original_Departamento;
                }

                Adapter.UpdateCommand.Parameters[19].Value = Original_Activo;
                Adapter.UpdateCommand.Parameters[20].Value = Original_DVH;
                Adapter.UpdateCommand.Parameters[21].Value = CodCli;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Localidad_CodLoc, string Cuit, string RazonSocial, string Calle, string Numero, string Piso, string Departamento, bool Activo, int DVH, int Original_CodCli, int Original_Localidad_CodLoc, string Original_Cuit, string Original_RazonSocial, string Original_Calle, string Original_Numero, string Original_Piso, string Original_Departamento, bool Original_Activo, int Original_DVH)


















            {
                return Update(Localidad_CodLoc, Cuit, RazonSocial, Calle, Numero, Piso, Departamento, Activo, DVH, Original_CodCli, Original_Localidad_CodLoc, Original_Cuit, Original_RazonSocial, Original_Calle, Original_Numero, Original_Piso, Original_Departamento, Original_Activo, Original_DVH, Original_CodCli);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Detalle_RemitoNVTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_RemitoNVTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Detalle_RemitoNV";
                tableMapping.ColumnMappings.Add("Remito_NotaVenta_CodRemito", "Remito_NotaVenta_CodRemito");
                tableMapping.ColumnMappings.Add("Producto_CodProd", "Producto_CodProd");
                tableMapping.ColumnMappings.Add("Cantidad", "Cantidad");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Detalle_RemitoNV] ([Remito_NotaVenta_CodRemito], [Producto_Cod" + "Prod], [Cantidad]) VALUES (@Remito_NotaVenta_CodRemito, @Producto_CodProd, @Cant" + "idad)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Remito_NotaVenta_CodRemito", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Remito_NotaVenta_CodRemito", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Producto_CodProd", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Producto_CodProd", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cantidad", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cantidad", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT Remito_NotaVenta_CodRemito, Producto_CodProd, Cantidad FROM dbo.Detalle_Re" + "mitoNV";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.Detalle_RemitoNVDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.Detalle_RemitoNVDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.Detalle_RemitoNVDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.Detalle_RemitoNVDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Detalle_RemitoNV");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Remito_NotaVenta_CodRemito, int Producto_CodProd, int Cantidad)
            {
                Adapter.InsertCommand.Parameters[0].Value = Remito_NotaVenta_CodRemito;
                Adapter.InsertCommand.Parameters[1].Value = Producto_CodProd;
                Adapter.InsertCommand.Parameters[2].Value = Cantidad;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Nota_PedidoTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_PedidoTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Nota_Pedido";
                tableMapping.ColumnMappings.Add("CodNot", "CodNot");
                tableMapping.ColumnMappings.Add("Nro_Nota", "Nro_Nota");
                tableMapping.ColumnMappings.Add("Proveedor_CodProv", "Proveedor_CodProv");
                tableMapping.ColumnMappings.Add("Fecha", "Fecha");
                tableMapping.ColumnMappings.Add("Activo", "Activo");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Nota_Pedido] WHERE (([CodNot] = @Original_CodNot) AND ([Nro_No" + "ta] = @Original_Nro_Nota) AND ([Proveedor_CodProv] = @Original_Proveedor_CodProv" + ") AND ([Fecha] = @Original_Fecha) AND ([Activo] = @Original_Activo))";

                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodNot", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nro_Nota", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Nota", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Proveedor_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Proveedor_CodProv", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Nota_Pedido] ([Nro_Nota], [Proveedor_CodProv], [Fecha], [Activ" + "o]) VALUES (@Nro_Nota, @Proveedor_CodProv, @Fecha, @Activo);" + '\r' + '\n' + "SELECT CodNot, Nro" + "_Nota, Proveedor_CodProv, Fecha, Activo FROM Nota_Pedido WHERE (CodNot = SCOPE_I" + "DENTITY())";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nro_Nota", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Nota", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Proveedor_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Proveedor_CodProv", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Nota_Pedido] SET [Nro_Nota] = @Nro_Nota, [Proveedor_CodProv] = @Pro" + "veedor_CodProv, [Fecha] = @Fecha, [Activo] = @Activo WHERE (([CodNot] = @Origina" + "l_CodNot) AND ([Nro_Nota] = @Original_Nro_Nota) AND ([Proveedor_CodProv] = @Orig" + "inal_Proveedor_CodProv) AND ([Fecha] = @Original_Fecha) AND ([Activo] = @Origina" + "l_Activo));" + '\r' + '\n' + "SELECT CodNot, Nro_Nota, Proveedor_CodProv, Fecha, Activo FROM Nota" + "_Pedido WHERE (CodNot = @CodNot)";




                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nro_Nota", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Nota", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Proveedor_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Proveedor_CodProv", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodNot", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nro_Nota", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Nota", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Proveedor_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Proveedor_CodProv", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodNot", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodNot", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodNot, Nro_Nota, Proveedor_CodProv, Fecha, Activo FROM dbo.Nota_Pedido";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.Nota_PedidoDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.Nota_PedidoDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.Nota_PedidoDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.Nota_PedidoDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Nota_Pedido");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodNot, string Original_Nro_Nota, int Original_Proveedor_CodProv, DateTime Original_Fecha, bool Original_Activo)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodNot;
                if (Original_Nro_Nota is null)
                {
                    throw new ArgumentNullException("Original_Nro_Nota");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_Nro_Nota;
                }

                Adapter.DeleteCommand.Parameters[2].Value = Original_Proveedor_CodProv;
                Adapter.DeleteCommand.Parameters[3].Value = Original_Fecha;
                Adapter.DeleteCommand.Parameters[4].Value = Original_Activo;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string Nro_Nota, int Proveedor_CodProv, DateTime Fecha, bool Activo)
            {
                if (Nro_Nota is null)
                {
                    throw new ArgumentNullException("Nro_Nota");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[0].Value = Nro_Nota;
                }

                Adapter.InsertCommand.Parameters[1].Value = Proveedor_CodProv;
                Adapter.InsertCommand.Parameters[2].Value = Fecha;
                Adapter.InsertCommand.Parameters[3].Value = Activo;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string Nro_Nota, int Proveedor_CodProv, DateTime Fecha, bool Activo, int Original_CodNot, string Original_Nro_Nota, int Original_Proveedor_CodProv, DateTime Original_Fecha, bool Original_Activo, int CodNot)
            {
                if (Nro_Nota is null)
                {
                    throw new ArgumentNullException("Nro_Nota");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[0].Value = Nro_Nota;
                }

                Adapter.UpdateCommand.Parameters[1].Value = Proveedor_CodProv;
                Adapter.UpdateCommand.Parameters[2].Value = Fecha;
                Adapter.UpdateCommand.Parameters[3].Value = Activo;
                Adapter.UpdateCommand.Parameters[4].Value = Original_CodNot;
                if (Original_Nro_Nota is null)
                {
                    throw new ArgumentNullException("Original_Nro_Nota");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = Original_Nro_Nota;
                }

                Adapter.UpdateCommand.Parameters[6].Value = Original_Proveedor_CodProv;
                Adapter.UpdateCommand.Parameters[7].Value = Original_Fecha;
                Adapter.UpdateCommand.Parameters[8].Value = Original_Activo;
                Adapter.UpdateCommand.Parameters[9].Value = CodNot;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string Nro_Nota, int Proveedor_CodProv, DateTime Fecha, bool Activo, int Original_CodNot, string Original_Nro_Nota, int Original_Proveedor_CodProv, DateTime Original_Fecha, bool Original_Activo)
            {
                return Update(Nro_Nota, Proveedor_CodProv, Fecha, Activo, Original_CodNot, Original_Nro_Nota, Original_Proveedor_CodProv, Original_Fecha, Original_Activo, Original_CodNot);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Nota_VentaTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Nota_VentaTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Nota_Venta";
                tableMapping.ColumnMappings.Add("CodNot", "CodNot");
                tableMapping.ColumnMappings.Add("Nro_Nota", "Nro_Nota");
                tableMapping.ColumnMappings.Add("Cliente_CodCli", "Cliente_CodCli");
                tableMapping.ColumnMappings.Add("Fecha", "Fecha");
                tableMapping.ColumnMappings.Add("Activo", "Activo");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Nota_Venta] WHERE (([CodNot] = @Original_CodNot) AND ([Nro_Not" + "a] = @Original_Nro_Nota) AND ([Cliente_CodCli] = @Original_Cliente_CodCli) AND (" + "[Fecha] = @Original_Fecha) AND ([Activo] = @Original_Activo))";

                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodNot", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nro_Nota", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Nota", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Nota_Venta] ([Nro_Nota], [Cliente_CodCli], [Fecha], [Activo]) " + "VALUES (@Nro_Nota, @Cliente_CodCli, @Fecha, @Activo);" + '\r' + '\n' + "SELECT CodNot, Nro_Nota, " + "Cliente_CodCli, Fecha, Activo FROM Nota_Venta WHERE (CodNot = SCOPE_IDENTITY())";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nro_Nota", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Nota", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Nota_Venta] SET [Nro_Nota] = @Nro_Nota, [Cliente_CodCli] = @Cliente" + "_CodCli, [Fecha] = @Fecha, [Activo] = @Activo WHERE (([CodNot] = @Original_CodNo" + "t) AND ([Nro_Nota] = @Original_Nro_Nota) AND ([Cliente_CodCli] = @Original_Clien" + "te_CodCli) AND ([Fecha] = @Original_Fecha) AND ([Activo] = @Original_Activo));" + '\r' + '\n' + "SELECT CodNot, Nro_Nota, Cliente_CodCli, Fecha, Activo FROM Nota_Venta WHERE (Co" + "dNot = @CodNot)";




                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nro_Nota", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Nota", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodNot", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nro_Nota", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Nota", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodNot", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodNot", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodNot, Nro_Nota, Cliente_CodCli, Fecha, Activo FROM dbo.Nota_Venta";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.Nota_VentaDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.Nota_VentaDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.Nota_VentaDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.Nota_VentaDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Nota_Venta");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodNot, string Original_Nro_Nota, int Original_Cliente_CodCli, DateTime Original_Fecha, bool Original_Activo)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodNot;
                if (Original_Nro_Nota is null)
                {
                    throw new ArgumentNullException("Original_Nro_Nota");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_Nro_Nota;
                }

                Adapter.DeleteCommand.Parameters[2].Value = Original_Cliente_CodCli;
                Adapter.DeleteCommand.Parameters[3].Value = Original_Fecha;
                Adapter.DeleteCommand.Parameters[4].Value = Original_Activo;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string Nro_Nota, int Cliente_CodCli, DateTime Fecha, bool Activo)
            {
                if (Nro_Nota is null)
                {
                    throw new ArgumentNullException("Nro_Nota");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[0].Value = Nro_Nota;
                }

                Adapter.InsertCommand.Parameters[1].Value = Cliente_CodCli;
                Adapter.InsertCommand.Parameters[2].Value = Fecha;
                Adapter.InsertCommand.Parameters[3].Value = Activo;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string Nro_Nota, int Cliente_CodCli, DateTime Fecha, bool Activo, int Original_CodNot, string Original_Nro_Nota, int Original_Cliente_CodCli, DateTime Original_Fecha, bool Original_Activo, int CodNot)
            {
                if (Nro_Nota is null)
                {
                    throw new ArgumentNullException("Nro_Nota");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[0].Value = Nro_Nota;
                }

                Adapter.UpdateCommand.Parameters[1].Value = Cliente_CodCli;
                Adapter.UpdateCommand.Parameters[2].Value = Fecha;
                Adapter.UpdateCommand.Parameters[3].Value = Activo;
                Adapter.UpdateCommand.Parameters[4].Value = Original_CodNot;
                if (Original_Nro_Nota is null)
                {
                    throw new ArgumentNullException("Original_Nro_Nota");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = Original_Nro_Nota;
                }

                Adapter.UpdateCommand.Parameters[6].Value = Original_Cliente_CodCli;
                Adapter.UpdateCommand.Parameters[7].Value = Original_Fecha;
                Adapter.UpdateCommand.Parameters[8].Value = Original_Activo;
                Adapter.UpdateCommand.Parameters[9].Value = CodNot;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string Nro_Nota, int Cliente_CodCli, DateTime Fecha, bool Activo, int Original_CodNot, string Original_Nro_Nota, int Original_Cliente_CodCli, DateTime Original_Fecha, bool Original_Activo)
            {
                return Update(Nro_Nota, Cliente_CodCli, Fecha, Activo, Original_CodNot, Original_Nro_Nota, Original_Cliente_CodCli, Original_Fecha, Original_Activo, Original_CodNot);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class ProductoTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProductoTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Producto";
                tableMapping.ColumnMappings.Add("CodProd", "CodProd");
                tableMapping.ColumnMappings.Add("Nombre", "Nombre");
                tableMapping.ColumnMappings.Add("Descripcion", "Descripcion");
                tableMapping.ColumnMappings.Add("Cantidad", "Cantidad");
                tableMapping.ColumnMappings.Add("Sector", "Sector");
                tableMapping.ColumnMappings.Add("Activo", "Activo");
                tableMapping.ColumnMappings.Add("DVH", "DVH");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Producto] WHERE (([CodProd] = @Original_CodProd) AND ([Nombre]" + " = @Original_Nombre) AND ([Descripcion] = @Original_Descripcion) AND ([Cantidad]" + " = @Original_Cantidad) AND ([Sector] = @Original_Sector) AND ([Activo] = @Origin" + "al_Activo) AND ([DVH] = @Original_DVH))";


                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodProd", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodProd", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nombre", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cantidad", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cantidad", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Sector", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Sector", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DVH", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "DVH", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Producto] ([Nombre], [Descripcion], [Cantidad], [Sector], [Act" + "ivo], [DVH]) VALUES (@Nombre, @Descripcion, @Cantidad, @Sector, @Activo, @DVH);" + '\r' + '\n' + "SELECT CodProd, Nombre, Descripcion, Cantidad, Sector, Activo, DVH FROM Product" + "o WHERE (CodProd = SCOPE_IDENTITY())";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nombre", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cantidad", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cantidad", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sector", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Sector", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DVH", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "DVH", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Producto] SET [Nombre] = @Nombre, [Descripcion] = @Descripcion, [Ca" + "ntidad] = @Cantidad, [Sector] = @Sector, [Activo] = @Activo, [DVH] = @DVH WHERE " + "(([CodProd] = @Original_CodProd) AND ([Nombre] = @Original_Nombre) AND ([Descrip" + "cion] = @Original_Descripcion) AND ([Cantidad] = @Original_Cantidad) AND ([Secto" + "r] = @Original_Sector) AND ([Activo] = @Original_Activo) AND ([DVH] = @Original_" + "DVH));" + '\r' + '\n' + "SELECT CodProd, Nombre, Descripcion, Cantidad, Sector, Activo, DVH FROM " + "Producto WHERE (CodProd = @CodProd)";





                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nombre", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cantidad", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cantidad", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Sector", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Sector", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@DVH", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "DVH", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodProd", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodProd", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nombre", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nombre", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cantidad", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cantidad", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Sector", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Sector", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_DVH", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "DVH", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodProd", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodProd", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodProd, Nombre, Descripcion, Cantidad, Sector, Activo, DVH FROM dbo.Produ" + "cto";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.ProductoDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.ProductoDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.ProductoDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.ProductoDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Producto");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodProd, string Original_Nombre, string Original_Descripcion, int Original_Cantidad, string Original_Sector, bool Original_Activo, int Original_DVH)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodProd;
                if (Original_Nombre is null)
                {
                    throw new ArgumentNullException("Original_Nombre");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[1].Value = Original_Nombre;
                }

                if (Original_Descripcion is null)
                {
                    throw new ArgumentNullException("Original_Descripcion");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_Descripcion;
                }

                Adapter.DeleteCommand.Parameters[3].Value = Original_Cantidad;
                if (Original_Sector is null)
                {
                    throw new ArgumentNullException("Original_Sector");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = Original_Sector;
                }

                Adapter.DeleteCommand.Parameters[5].Value = Original_Activo;
                Adapter.DeleteCommand.Parameters[6].Value = Original_DVH;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string Nombre, string Descripcion, int Cantidad, string Sector, bool Activo, int DVH)
            {
                if (Nombre is null)
                {
                    throw new ArgumentNullException("Nombre");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[0].Value = Nombre;
                }

                if (Descripcion is null)
                {
                    throw new ArgumentNullException("Descripcion");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = Descripcion;
                }

                Adapter.InsertCommand.Parameters[2].Value = Cantidad;
                if (Sector is null)
                {
                    throw new ArgumentNullException("Sector");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = Sector;
                }

                Adapter.InsertCommand.Parameters[4].Value = Activo;
                Adapter.InsertCommand.Parameters[5].Value = DVH;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string Nombre, string Descripcion, int Cantidad, string Sector, bool Activo, int DVH, int Original_CodProd, string Original_Nombre, string Original_Descripcion, int Original_Cantidad, string Original_Sector, bool Original_Activo, int Original_DVH, int CodProd)
            {
                if (Nombre is null)
                {
                    throw new ArgumentNullException("Nombre");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[0].Value = Nombre;
                }

                if (Descripcion is null)
                {
                    throw new ArgumentNullException("Descripcion");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = Descripcion;
                }

                Adapter.UpdateCommand.Parameters[2].Value = Cantidad;
                if (Sector is null)
                {
                    throw new ArgumentNullException("Sector");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = Sector;
                }

                Adapter.UpdateCommand.Parameters[4].Value = Activo;
                Adapter.UpdateCommand.Parameters[5].Value = DVH;
                Adapter.UpdateCommand.Parameters[6].Value = Original_CodProd;
                if (Original_Nombre is null)
                {
                    throw new ArgumentNullException("Original_Nombre");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = Original_Nombre;
                }

                if (Original_Descripcion is null)
                {
                    throw new ArgumentNullException("Original_Descripcion");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value = Original_Descripcion;
                }

                Adapter.UpdateCommand.Parameters[9].Value = Original_Cantidad;
                if (Original_Sector is null)
                {
                    throw new ArgumentNullException("Original_Sector");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[10].Value = Original_Sector;
                }

                Adapter.UpdateCommand.Parameters[11].Value = Original_Activo;
                Adapter.UpdateCommand.Parameters[12].Value = Original_DVH;
                Adapter.UpdateCommand.Parameters[13].Value = CodProd;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(string Nombre, string Descripcion, int Cantidad, string Sector, bool Activo, int DVH, int Original_CodProd, string Original_Nombre, string Original_Descripcion, int Original_Cantidad, string Original_Sector, bool Original_Activo, int Original_DVH)
            {
                return Update(Nombre, Descripcion, Cantidad, Sector, Activo, DVH, Original_CodProd, Original_Nombre, Original_Descripcion, Original_Cantidad, Original_Sector, Original_Activo, Original_DVH, Original_CodProd);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class ProveedorTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ProveedorTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Proveedor";
                tableMapping.ColumnMappings.Add("CodProv", "CodProv");
                tableMapping.ColumnMappings.Add("Localidad_CodLoc", "Localidad_CodLoc");
                tableMapping.ColumnMappings.Add("Cuit", "Cuit");
                tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial");
                tableMapping.ColumnMappings.Add("CorreoElectronico", "CorreoElectronico");
                tableMapping.ColumnMappings.Add("Calle", "Calle");
                tableMapping.ColumnMappings.Add("Numero", "Numero");
                tableMapping.ColumnMappings.Add("Piso", "Piso");
                tableMapping.ColumnMappings.Add("Departamento", "Departamento");
                tableMapping.ColumnMappings.Add("Activo", "Activo");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Proveedor] WHERE (([CodProv] = @Original_CodProv) AND ([Locali" + "dad_CodLoc] = @Original_Localidad_CodLoc) AND ([Cuit] = @Original_Cuit) AND ([Ra" + "zonSocial] = @Original_RazonSocial) AND ([CorreoElectronico] = @Original_CorreoE" + "lectronico) AND ([Calle] = @Original_Calle) AND ([Numero] = @Original_Numero) AN" + "D ((@IsNull_Piso = 1 AND [Piso] IS NULL) OR ([Piso] = @Original_Piso)) AND ((@Is" + "Null_Departamento = 1 AND [Departamento] IS NULL) OR ([Departamento] = @Original" + "_Departamento)) AND ([Activo] = @Original_Activo))";





                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodProv", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Localidad_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Localidad_CodLoc", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cuit", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Cuit", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RazonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "RazonSocial", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CorreoElectronico", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CorreoElectronico", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Calle", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Calle", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Piso", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Piso", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Departamento", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Departamento", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Proveedor] ([Localidad_CodLoc], [Cuit], [RazonSocial], [Correo" + "Electronico], [Calle], [Numero], [Piso], [Departamento], [Activo]) VALUES (@Loca" + "lidad_CodLoc, @Cuit, @RazonSocial, @CorreoElectronico, @Calle, @Numero, @Piso, @" + "Departamento, @Activo);" + '\r' + '\n' + "SELECT CodProv, Localidad_CodLoc, Cuit, RazonSocial, Co" + "rreoElectronico, Calle, Numero, Piso, Departamento, Activo FROM Proveedor WHERE " + "(CodProv = SCOPE_IDENTITY())";




                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Localidad_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Localidad_CodLoc", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cuit", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Cuit", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RazonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "RazonSocial", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CorreoElectronico", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CorreoElectronico", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Calle", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Calle", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Piso", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Departamento", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Proveedor] SET [Localidad_CodLoc] = @Localidad_CodLoc, [Cuit] = @Cu" + "it, [RazonSocial] = @RazonSocial, [CorreoElectronico] = @CorreoElectronico, [Cal" + "le] = @Calle, [Numero] = @Numero, [Piso] = @Piso, [Departamento] = @Departamento" + ", [Activo] = @Activo WHERE (([CodProv] = @Original_CodProv) AND ([Localidad_CodL" + "oc] = @Original_Localidad_CodLoc) AND ([Cuit] = @Original_Cuit) AND ([RazonSocia" + "l] = @Original_RazonSocial) AND ([CorreoElectronico] = @Original_CorreoElectroni" + "co) AND ([Calle] = @Original_Calle) AND ([Numero] = @Original_Numero) AND ((@IsN" + "ull_Piso = 1 AND [Piso] IS NULL) OR ([Piso] = @Original_Piso)) AND ((@IsNull_Dep" + "artamento = 1 AND [Departamento] IS NULL) OR ([Departamento] = @Original_Departa" + "mento)) AND ([Activo] = @Original_Activo));" + '\r' + '\n' + "SELECT CodProv, Localidad_CodLoc, C" + "uit, RazonSocial, CorreoElectronico, Calle, Numero, Piso, Departamento, Activo F" + "ROM Proveedor WHERE (CodProv = @CodProv)";










                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Localidad_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Localidad_CodLoc", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cuit", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Cuit", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RazonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "RazonSocial", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CorreoElectronico", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CorreoElectronico", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Calle", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Calle", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Piso", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Departamento", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodProv", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Localidad_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Localidad_CodLoc", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cuit", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Cuit", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RazonSocial", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "RazonSocial", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CorreoElectronico", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CorreoElectronico", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Calle", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Calle", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Piso", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Piso", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Piso", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Departamento", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Departamento", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Departamento", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Activo", SqlDbType.Bit, 0, ParameterDirection.Input, 0, 0, "Activo", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodProv", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodProv", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodProv, Localidad_CodLoc, Cuit, RazonSocial, CorreoElectronico, Calle, Nu" + "mero, Piso, Departamento, Activo FROM dbo.Proveedor";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.ProveedorDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.ProveedorDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.ProveedorDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.ProveedorDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Proveedor");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodProv, int Original_Localidad_CodLoc, string Original_Cuit, string Original_RazonSocial, string Original_CorreoElectronico, string Original_Calle, string Original_Numero, string Original_Piso, string Original_Departamento, bool Original_Activo)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodProv;
                Adapter.DeleteCommand.Parameters[1].Value = Original_Localidad_CodLoc;
                if (Original_Cuit is null)
                {
                    throw new ArgumentNullException("Original_Cuit");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_Cuit;
                }

                if (Original_RazonSocial is null)
                {
                    throw new ArgumentNullException("Original_RazonSocial");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[3].Value = Original_RazonSocial;
                }

                if (Original_CorreoElectronico is null)
                {
                    throw new ArgumentNullException("Original_CorreoElectronico");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = Original_CorreoElectronico;
                }

                if (Original_Calle is null)
                {
                    throw new ArgumentNullException("Original_Calle");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[5].Value = Original_Calle;
                }

                if (Original_Numero is null)
                {
                    throw new ArgumentNullException("Original_Numero");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[6].Value = Original_Numero;
                }

                if (Original_Piso is null)
                {
                    Adapter.DeleteCommand.Parameters[7].Value = 1;
                    Adapter.DeleteCommand.Parameters[8].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[7].Value = 0;
                    Adapter.DeleteCommand.Parameters[8].Value = Original_Piso;
                }

                if (Original_Departamento is null)
                {
                    Adapter.DeleteCommand.Parameters[9].Value = 1;
                    Adapter.DeleteCommand.Parameters[10].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[9].Value = 0;
                    Adapter.DeleteCommand.Parameters[10].Value = Original_Departamento;
                }

                Adapter.DeleteCommand.Parameters[11].Value = Original_Activo;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Localidad_CodLoc, string Cuit, string RazonSocial, string CorreoElectronico, string Calle, string Numero, string Piso, string Departamento, bool Activo)
            {
                Adapter.InsertCommand.Parameters[0].Value = Localidad_CodLoc;
                if (Cuit is null)
                {
                    throw new ArgumentNullException("Cuit");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = Cuit;
                }

                if (RazonSocial is null)
                {
                    throw new ArgumentNullException("RazonSocial");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = RazonSocial;
                }

                if (CorreoElectronico is null)
                {
                    throw new ArgumentNullException("CorreoElectronico");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value = CorreoElectronico;
                }

                if (Calle is null)
                {
                    throw new ArgumentNullException("Calle");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value = Calle;
                }

                if (Numero is null)
                {
                    throw new ArgumentNullException("Numero");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value = Numero;
                }

                if (Piso is null)
                {
                    Adapter.InsertCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value = Piso;
                }

                if (Departamento is null)
                {
                    Adapter.InsertCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[7].Value = Departamento;
                }

                Adapter.InsertCommand.Parameters[8].Value = Activo;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Localidad_CodLoc, string Cuit, string RazonSocial, string CorreoElectronico, string Calle, string Numero, string Piso, string Departamento, bool Activo, int Original_CodProv, int Original_Localidad_CodLoc, string Original_Cuit, string Original_RazonSocial, string Original_CorreoElectronico, string Original_Calle, string Original_Numero, string Original_Piso, string Original_Departamento, bool Original_Activo, int CodProv)



















            {
                Adapter.UpdateCommand.Parameters[0].Value = Localidad_CodLoc;
                if (Cuit is null)
                {
                    throw new ArgumentNullException("Cuit");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = Cuit;
                }

                if (RazonSocial is null)
                {
                    throw new ArgumentNullException("RazonSocial");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = RazonSocial;
                }

                if (CorreoElectronico is null)
                {
                    throw new ArgumentNullException("CorreoElectronico");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value = CorreoElectronico;
                }

                if (Calle is null)
                {
                    throw new ArgumentNullException("Calle");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Calle;
                }

                if (Numero is null)
                {
                    throw new ArgumentNullException("Numero");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = Numero;
                }

                if (Piso is null)
                {
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = Piso;
                }

                if (Departamento is null)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = Departamento;
                }

                Adapter.UpdateCommand.Parameters[8].Value = Activo;
                Adapter.UpdateCommand.Parameters[9].Value = Original_CodProv;
                Adapter.UpdateCommand.Parameters[10].Value = Original_Localidad_CodLoc;
                if (Original_Cuit is null)
                {
                    throw new ArgumentNullException("Original_Cuit");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[11].Value = Original_Cuit;
                }

                if (Original_RazonSocial is null)
                {
                    throw new ArgumentNullException("Original_RazonSocial");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[12].Value = Original_RazonSocial;
                }

                if (Original_CorreoElectronico is null)
                {
                    throw new ArgumentNullException("Original_CorreoElectronico");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[13].Value = Original_CorreoElectronico;
                }

                if (Original_Calle is null)
                {
                    throw new ArgumentNullException("Original_Calle");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[14].Value = Original_Calle;
                }

                if (Original_Numero is null)
                {
                    throw new ArgumentNullException("Original_Numero");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[15].Value = Original_Numero;
                }

                if (Original_Piso is null)
                {
                    Adapter.UpdateCommand.Parameters[16].Value = 1;
                    Adapter.UpdateCommand.Parameters[17].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[16].Value = 0;
                    Adapter.UpdateCommand.Parameters[17].Value = Original_Piso;
                }

                if (Original_Departamento is null)
                {
                    Adapter.UpdateCommand.Parameters[18].Value = 1;
                    Adapter.UpdateCommand.Parameters[19].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[18].Value = 0;
                    Adapter.UpdateCommand.Parameters[19].Value = Original_Departamento;
                }

                Adapter.UpdateCommand.Parameters[20].Value = Original_Activo;
                Adapter.UpdateCommand.Parameters[21].Value = CodProv;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Localidad_CodLoc, string Cuit, string RazonSocial, string CorreoElectronico, string Calle, string Numero, string Piso, string Departamento, bool Activo, int Original_CodProv, int Original_Localidad_CodLoc, string Original_Cuit, string Original_RazonSocial, string Original_CorreoElectronico, string Original_Calle, string Original_Numero, string Original_Piso, string Original_Departamento, bool Original_Activo)


















            {
                return Update(Localidad_CodLoc, Cuit, RazonSocial, CorreoElectronico, Calle, Numero, Piso, Departamento, Activo, Original_CodProv, Original_Localidad_CodLoc, Original_Cuit, Original_RazonSocial, Original_CorreoElectronico, Original_Calle, Original_Numero, Original_Piso, Original_Departamento, Original_Activo, Original_CodProv);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Tel_CliTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_CliTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Tel_Cli";
                tableMapping.ColumnMappings.Add("CodTel", "CodTel");
                tableMapping.ColumnMappings.Add("Cliente_CodCli", "Cliente_CodCli");
                tableMapping.ColumnMappings.Add("Numero", "Numero");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Tel_Cli] WHERE (([CodTel] = @Original_CodTel) AND ([Cliente_Co" + "dCli] = @Original_Cliente_CodCli) AND ([Numero] = @Original_Numero))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodTel", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodTel", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Tel_Cli] ([Cliente_CodCli], [Numero]) VALUES (@Cliente_CodCli," + " @Numero);" + '\r' + '\n' + "SELECT CodTel, Cliente_CodCli, Numero FROM Tel_Cli WHERE (CodTel = S" + "COPE_IDENTITY())";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Tel_Cli] SET [Cliente_CodCli] = @Cliente_CodCli, [Numero] = @Numero" + " WHERE (([CodTel] = @Original_CodTel) AND ([Cliente_CodCli] = @Original_Cliente_" + "CodCli) AND ([Numero] = @Original_Numero));" + '\r' + '\n' + "SELECT CodTel, Cliente_CodCli, Nume" + "ro FROM Tel_Cli WHERE (CodTel = @CodTel)";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodTel", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodTel", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodTel", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodTel", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodTel, Cliente_CodCli, Numero FROM dbo.Tel_Cli";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.Tel_CliDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.Tel_CliDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.Tel_CliDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.Tel_CliDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Tel_Cli");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodTel, int Original_Cliente_CodCli, string Original_Numero)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodTel;
                Adapter.DeleteCommand.Parameters[1].Value = Original_Cliente_CodCli;
                if (Original_Numero is null)
                {
                    throw new ArgumentNullException("Original_Numero");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_Numero;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Cliente_CodCli, string Numero)
            {
                Adapter.InsertCommand.Parameters[0].Value = Cliente_CodCli;
                if (Numero is null)
                {
                    throw new ArgumentNullException("Numero");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = Numero;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Cliente_CodCli, string Numero, int Original_CodTel, int Original_Cliente_CodCli, string Original_Numero, int CodTel)
            {
                Adapter.UpdateCommand.Parameters[0].Value = Cliente_CodCli;
                if (Numero is null)
                {
                    throw new ArgumentNullException("Numero");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = Numero;
                }

                Adapter.UpdateCommand.Parameters[2].Value = Original_CodTel;
                Adapter.UpdateCommand.Parameters[3].Value = Original_Cliente_CodCli;
                if (Original_Numero is null)
                {
                    throw new ArgumentNullException("Original_Numero");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Original_Numero;
                }

                Adapter.UpdateCommand.Parameters[5].Value = CodTel;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Cliente_CodCli, string Numero, int Original_CodTel, int Original_Cliente_CodCli, string Original_Numero)
            {
                return Update(Cliente_CodCli, Numero, Original_CodTel, Original_Cliente_CodCli, Original_Numero, Original_CodTel);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Tel_ProvTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Tel_ProvTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Tel_Prov";
                tableMapping.ColumnMappings.Add("CodTel", "CodTel");
                tableMapping.ColumnMappings.Add("Proveedor_CodProv", "Proveedor_CodProv");
                tableMapping.ColumnMappings.Add("Numero", "Numero");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Tel_Prov] WHERE (([CodTel] = @Original_CodTel) AND ([Proveedor" + "_CodProv] = @Original_Proveedor_CodProv) AND ([Numero] = @Original_Numero))";
                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodTel", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodTel", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Proveedor_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Proveedor_CodProv", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Tel_Prov] ([Proveedor_CodProv], [Numero]) VALUES (@Proveedor_C" + "odProv, @Numero);" + '\r' + '\n' + "SELECT CodTel, Proveedor_CodProv, Numero FROM Tel_Prov WHERE " + "(CodTel = SCOPE_IDENTITY())";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Proveedor_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Proveedor_CodProv", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Tel_Prov] SET [Proveedor_CodProv] = @Proveedor_CodProv, [Numero] = " + "@Numero WHERE (([CodTel] = @Original_CodTel) AND ([Proveedor_CodProv] = @Origina" + "l_Proveedor_CodProv) AND ([Numero] = @Original_Numero));" + '\r' + '\n' + "SELECT CodTel, Proveed" + "or_CodProv, Numero FROM Tel_Prov WHERE (CodTel = @CodTel)";


                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Proveedor_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Proveedor_CodProv", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodTel", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodTel", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Proveedor_CodProv", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Proveedor_CodProv", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Numero", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Numero", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodTel", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodTel", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodTel, Proveedor_CodProv, Numero FROM dbo.Tel_Prov";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.Tel_ProvDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.Tel_ProvDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.Tel_ProvDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.Tel_ProvDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Tel_Prov");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodTel, int Original_Proveedor_CodProv, string Original_Numero)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodTel;
                Adapter.DeleteCommand.Parameters[1].Value = Original_Proveedor_CodProv;
                if (Original_Numero is null)
                {
                    throw new ArgumentNullException("Original_Numero");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_Numero;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Proveedor_CodProv, string Numero)
            {
                Adapter.InsertCommand.Parameters[0].Value = Proveedor_CodProv;
                if (Numero is null)
                {
                    throw new ArgumentNullException("Numero");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = Numero;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Proveedor_CodProv, string Numero, int Original_CodTel, int Original_Proveedor_CodProv, string Original_Numero, int CodTel)
            {
                Adapter.UpdateCommand.Parameters[0].Value = Proveedor_CodProv;
                if (Numero is null)
                {
                    throw new ArgumentNullException("Numero");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = Numero;
                }

                Adapter.UpdateCommand.Parameters[2].Value = Original_CodTel;
                Adapter.UpdateCommand.Parameters[3].Value = Original_Proveedor_CodProv;
                if (Original_Numero is null)
                {
                    throw new ArgumentNullException("Original_Numero");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value = Original_Numero;
                }

                Adapter.UpdateCommand.Parameters[5].Value = CodTel;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Proveedor_CodProv, string Numero, int Original_CodTel, int Original_Proveedor_CodProv, string Original_Numero)
            {
                return Update(Proveedor_CodProv, Numero, Original_CodTel, Original_Proveedor_CodProv, Original_Numero, Original_CodTel);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class LocalidadTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public LocalidadTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Localidad";
                tableMapping.ColumnMappings.Add("CodLoc", "CodLoc");
                tableMapping.ColumnMappings.Add("Provincia_CodProvincia", "Provincia_CodProvincia");
                tableMapping.ColumnMappings.Add("Descripcion", "Descripcion");
                tableMapping.ColumnMappings.Add("CodigoPostal", "CodigoPostal");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Localidad] WHERE (([CodLoc] = @Original_CodLoc) AND ([Provinci" + "a_CodProvincia] = @Original_Provincia_CodProvincia) AND ((@IsNull_Descripcion = " + "1 AND [Descripcion] IS NULL) OR ([Descripcion] = @Original_Descripcion)) AND ((@" + "IsNull_CodigoPostal = 1 AND [CodigoPostal] IS NULL) OR ([CodigoPostal] = @Origin" + "al_CodigoPostal)))";



                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodLoc", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Provincia_CodProvincia", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Provincia_CodProvincia", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Descripcion", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CodigoPostal", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodigoPostal", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodigoPostal", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CodigoPostal", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Localidad] ([Provincia_CodProvincia], [Descripcion], [CodigoPo" + "stal]) VALUES (@Provincia_CodProvincia, @Descripcion, @CodigoPostal);" + '\r' + '\n' + "SELECT Co" + "dLoc, Provincia_CodProvincia, Descripcion, CodigoPostal FROM Localidad WHERE (Co" + "dLoc = SCOPE_IDENTITY())";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Provincia_CodProvincia", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Provincia_CodProvincia", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodigoPostal", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CodigoPostal", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Localidad] SET [Provincia_CodProvincia] = @Provincia_CodProvincia, " + "[Descripcion] = @Descripcion, [CodigoPostal] = @CodigoPostal WHERE (([CodLoc] = " + "@Original_CodLoc) AND ([Provincia_CodProvincia] = @Original_Provincia_CodProvinc" + "ia) AND ((@IsNull_Descripcion = 1 AND [Descripcion] IS NULL) OR ([Descripcion] =" + " @Original_Descripcion)) AND ((@IsNull_CodigoPostal = 1 AND [CodigoPostal] IS NU" + "LL) OR ([CodigoPostal] = @Original_CodigoPostal)));" + '\r' + '\n' + "SELECT CodLoc, Provincia_Co" + "dProvincia, Descripcion, CodigoPostal FROM Localidad WHERE (CodLoc = @CodLoc)";





                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Provincia_CodProvincia", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Provincia_CodProvincia", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodigoPostal", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CodigoPostal", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodLoc", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodLoc", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Provincia_CodProvincia", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Provincia_CodProvincia", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Descripcion", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Descripcion", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Descripcion", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_CodigoPostal", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodigoPostal", DataRowVersion.Original, true, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodigoPostal", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "CodigoPostal", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodLoc", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodLoc", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodLoc, Provincia_CodProvincia, Descripcion, CodigoPostal FROM dbo.Localid" + "ad";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.LocalidadDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.LocalidadDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.LocalidadDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.LocalidadDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Localidad");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodLoc, int Original_Provincia_CodProvincia, string Original_Descripcion, string Original_CodigoPostal)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodLoc;
                Adapter.DeleteCommand.Parameters[1].Value = Original_Provincia_CodProvincia;
                if (Original_Descripcion is null)
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 1;
                    Adapter.DeleteCommand.Parameters[3].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = 0;
                    Adapter.DeleteCommand.Parameters[3].Value = Original_Descripcion;
                }

                if (Original_CodigoPostal is null)
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 1;
                    Adapter.DeleteCommand.Parameters[5].Value = DBNull.Value;
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[4].Value = 0;
                    Adapter.DeleteCommand.Parameters[5].Value = Original_CodigoPostal;
                }

                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Provincia_CodProvincia, string Descripcion, string CodigoPostal)
            {
                Adapter.InsertCommand.Parameters[0].Value = Provincia_CodProvincia;
                if (Descripcion is null)
                {
                    Adapter.InsertCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = Descripcion;
                }

                if (CodigoPostal is null)
                {
                    Adapter.InsertCommand.Parameters[2].Value = DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = CodigoPostal;
                }

                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Provincia_CodProvincia, string Descripcion, string CodigoPostal, int Original_CodLoc, int Original_Provincia_CodProvincia, string Original_Descripcion, string Original_CodigoPostal, int CodLoc)
            {
                Adapter.UpdateCommand.Parameters[0].Value = Provincia_CodProvincia;
                if (Descripcion is null)
                {
                    Adapter.UpdateCommand.Parameters[1].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = Descripcion;
                }

                if (CodigoPostal is null)
                {
                    Adapter.UpdateCommand.Parameters[2].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value = CodigoPostal;
                }

                Adapter.UpdateCommand.Parameters[3].Value = Original_CodLoc;
                Adapter.UpdateCommand.Parameters[4].Value = Original_Provincia_CodProvincia;
                if (Original_Descripcion is null)
                {
                    Adapter.UpdateCommand.Parameters[5].Value = 1;
                    Adapter.UpdateCommand.Parameters[6].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value = 0;
                    Adapter.UpdateCommand.Parameters[6].Value = Original_Descripcion;
                }

                if (Original_CodigoPostal is null)
                {
                    Adapter.UpdateCommand.Parameters[7].Value = 1;
                    Adapter.UpdateCommand.Parameters[8].Value = DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value = 0;
                    Adapter.UpdateCommand.Parameters[8].Value = Original_CodigoPostal;
                }

                Adapter.UpdateCommand.Parameters[9].Value = CodLoc;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Provincia_CodProvincia, string Descripcion, string CodigoPostal, int Original_CodLoc, int Original_Provincia_CodProvincia, string Original_Descripcion, string Original_CodigoPostal)
            {
                return Update(Provincia_CodProvincia, Descripcion, CodigoPostal, Original_CodLoc, Original_Provincia_CodProvincia, Original_Descripcion, Original_CodigoPostal, Original_CodLoc);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Detalle_NotaVentaTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaVentaTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Detalle_NotaVenta";
                tableMapping.ColumnMappings.Add("Nota_Venta_CodNot", "Nota_Venta_CodNot");
                tableMapping.ColumnMappings.Add("Producto_CodProd", "Producto_CodProd");
                tableMapping.ColumnMappings.Add("Precio", "Precio");
                tableMapping.ColumnMappings.Add("Cantidad", "Cantidad");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Detalle_NotaVenta] ([Nota_Venta_CodNot], [Producto_CodProd], [" + "Precio], [Cantidad]) VALUES (@Nota_Venta_CodNot, @Producto_CodProd, @Precio, @Ca" + "ntidad)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nota_Venta_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Nota_Venta_CodNot", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Producto_CodProd", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Producto_CodProd", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Precio", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Precio", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cantidad", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cantidad", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT Nota_Venta_CodNot, Producto_CodProd, Precio, Cantidad FROM dbo.Detalle_Not" + "aVenta";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.Detalle_NotaVentaDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.Detalle_NotaVentaDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.Detalle_NotaVentaDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.Detalle_NotaVentaDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Detalle_NotaVenta");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Nota_Venta_CodNot, int Producto_CodProd, string Precio, int Cantidad)
            {
                Adapter.InsertCommand.Parameters[0].Value = Nota_Venta_CodNot;
                Adapter.InsertCommand.Parameters[1].Value = Producto_CodProd;
                if (Precio is null)
                {
                    throw new ArgumentNullException("Precio");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = Precio;
                }

                Adapter.InsertCommand.Parameters[3].Value = Cantidad;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Remito_NotaVentaTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Remito_NotaVentaTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Remito_NotaVenta";
                tableMapping.ColumnMappings.Add("CodRemito", "CodRemito");
                tableMapping.ColumnMappings.Add("Nota_Venta_CodNot", "Nota_Venta_CodNot");
                tableMapping.ColumnMappings.Add("Nro_Remito", "Nro_Remito");
                tableMapping.ColumnMappings.Add("Cliente_CodCli", "Cliente_CodCli");
                tableMapping.ColumnMappings.Add("Fecha", "Fecha");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection = Connection;
                _adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Remito_NotaVenta] WHERE (([CodRemito] = @Original_CodRemito) A" + "ND ([Nota_Venta_CodNot] = @Original_Nota_Venta_CodNot) AND ([Nro_Remito] = @Orig" + "inal_Nro_Remito) AND ([Cliente_CodCli] = @Original_Cliente_CodCli) AND ([Fecha] " + "= @Original_Fecha))";


                _adapter.DeleteCommand.CommandType = CommandType.Text;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodRemito", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodRemito", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nota_Venta_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Nota_Venta_CodNot", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nro_Remito", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Remito", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Remito_NotaVenta] ([Nota_Venta_CodNot], [Nro_Remito], [Cliente" + "_CodCli], [Fecha]) VALUES (@Nota_Venta_CodNot, @Nro_Remito, @Cliente_CodCli, @Fe" + "cha);" + '\r' + '\n' + "SELECT CodRemito, Nota_Venta_CodNot, Nro_Remito, Cliente_CodCli, Fecha FR" + "OM Remito_NotaVenta WHERE (CodRemito = SCOPE_IDENTITY())";


                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nota_Venta_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Nota_Venta_CodNot", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nro_Remito", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Remito", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection = Connection;
                _adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Remito_NotaVenta] SET [Nota_Venta_CodNot] = @Nota_Venta_CodNot, [Nr" + "o_Remito] = @Nro_Remito, [Cliente_CodCli] = @Cliente_CodCli, [Fecha] = @Fecha WH" + "ERE (([CodRemito] = @Original_CodRemito) AND ([Nota_Venta_CodNot] = @Original_No" + "ta_Venta_CodNot) AND ([Nro_Remito] = @Original_Nro_Remito) AND ([Cliente_CodCli]" + " = @Original_Cliente_CodCli) AND ([Fecha] = @Original_Fecha));" + '\r' + '\n' + "SELECT CodRemito" + ", Nota_Venta_CodNot, Nro_Remito, Cliente_CodCli, Fecha FROM Remito_NotaVenta WHE" + "RE (CodRemito = @CodRemito)";





                _adapter.UpdateCommand.CommandType = CommandType.Text;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nota_Venta_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Nota_Venta_CodNot", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nro_Remito", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Remito", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CodRemito", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "CodRemito", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nota_Venta_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Nota_Venta_CodNot", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Nro_Remito", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Nro_Remito", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Cliente_CodCli", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cliente_CodCli", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Fecha", SqlDbType.DateTime, 0, ParameterDirection.Input, 0, 0, "Fecha", DataRowVersion.Original, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CodRemito", SqlDbType.Int, 4, ParameterDirection.Input, 0, 0, "CodRemito", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT CodRemito, Nota_Venta_CodNot, Nro_Remito, Cliente_CodCli, Fecha FROM dbo.R" + "emito_NotaVenta";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.Remito_NotaVentaDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.Remito_NotaVentaDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.Remito_NotaVentaDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.Remito_NotaVentaDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Remito_NotaVenta");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Delete, true)]
            public virtual int Delete(int Original_CodRemito, int Original_Nota_Venta_CodNot, string Original_Nro_Remito, int Original_Cliente_CodCli, DateTime Original_Fecha)
            {
                Adapter.DeleteCommand.Parameters[0].Value = Original_CodRemito;
                Adapter.DeleteCommand.Parameters[1].Value = Original_Nota_Venta_CodNot;
                if (Original_Nro_Remito is null)
                {
                    throw new ArgumentNullException("Original_Nro_Remito");
                }
                else
                {
                    Adapter.DeleteCommand.Parameters[2].Value = Original_Nro_Remito;
                }

                Adapter.DeleteCommand.Parameters[3].Value = Original_Cliente_CodCli;
                Adapter.DeleteCommand.Parameters[4].Value = Original_Fecha;
                var previousConnectionState = Adapter.DeleteCommand.Connection.State;
                if ((Adapter.DeleteCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.DeleteCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.DeleteCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.DeleteCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Nota_Venta_CodNot, string Nro_Remito, int Cliente_CodCli, DateTime Fecha)
            {
                Adapter.InsertCommand.Parameters[0].Value = Nota_Venta_CodNot;
                if (Nro_Remito is null)
                {
                    throw new ArgumentNullException("Nro_Remito");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value = Nro_Remito;
                }

                Adapter.InsertCommand.Parameters[2].Value = Cliente_CodCli;
                Adapter.InsertCommand.Parameters[3].Value = Fecha;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Nota_Venta_CodNot, string Nro_Remito, int Cliente_CodCli, DateTime Fecha, int Original_CodRemito, int Original_Nota_Venta_CodNot, string Original_Nro_Remito, int Original_Cliente_CodCli, DateTime Original_Fecha, int CodRemito)
            {
                Adapter.UpdateCommand.Parameters[0].Value = Nota_Venta_CodNot;
                if (Nro_Remito is null)
                {
                    throw new ArgumentNullException("Nro_Remito");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value = Nro_Remito;
                }

                Adapter.UpdateCommand.Parameters[2].Value = Cliente_CodCli;
                Adapter.UpdateCommand.Parameters[3].Value = Fecha;
                Adapter.UpdateCommand.Parameters[4].Value = Original_CodRemito;
                Adapter.UpdateCommand.Parameters[5].Value = Original_Nota_Venta_CodNot;
                if (Original_Nro_Remito is null)
                {
                    throw new ArgumentNullException("Original_Nro_Remito");
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value = Original_Nro_Remito;
                }

                Adapter.UpdateCommand.Parameters[7].Value = Original_Cliente_CodCli;
                Adapter.UpdateCommand.Parameters[8].Value = Original_Fecha;
                Adapter.UpdateCommand.Parameters[9].Value = CodRemito;
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int Nota_Venta_CodNot, string Nro_Remito, int Cliente_CodCli, DateTime Fecha, int Original_CodRemito, int Original_Nota_Venta_CodNot, string Original_Nro_Remito, int Original_Cliente_CodCli, DateTime Original_Fecha)
            {
                return Update(Nota_Venta_CodNot, Nro_Remito, Cliente_CodCli, Fecha, Original_CodRemito, Original_Nota_Venta_CodNot, Original_Nro_Remito, Original_Cliente_CodCli, Original_Fecha, Original_CodRemito);
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" + ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class Detalle_NotaPedidoTableAdapter : System.ComponentModel.Component
        {
            private System.Data.SqlClient.SqlDataAdapter _adapter;
            private System.Data.SqlClient.SqlConnection _connection;
            private System.Data.SqlClient.SqlTransaction _transaction;
            private System.Data.SqlClient.SqlCommand[] _commandCollection;
            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public Detalle_NotaPedidoTableAdapter() : base()
            {
                ClearBeforeFill = true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }

                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }

                    return _connection;
                }

                set
                {
                    _connection = value;
                    if (Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Connection = value;
                    }

                    if (Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Connection = value;
                    }

                    if (Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Connection = value;
                    }

                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        if (CommandCollection[i] is object)
                        {
                            CommandCollection[i].Connection = value;
                        }

                        i = i + 1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }

                set
                {
                    _transaction = value;
                    int i = 0;
                    while (i < CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction = _transaction;
                        i = i + 1;
                    }

                    if (Adapter is object && Adapter.DeleteCommand is object)
                    {
                        Adapter.DeleteCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.InsertCommand is object)
                    {
                        Adapter.InsertCommand.Transaction = _transaction;
                    }

                    if (Adapter is object && Adapter.UpdateCommand is object)
                    {
                        Adapter.UpdateCommand.Transaction = _transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }

                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }

                set
                {
                    _clearBeforeFill = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitAdapter()
            {
                _adapter = new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable = "Table";
                tableMapping.DataSetTable = "Detalle_NotaPedido";
                tableMapping.ColumnMappings.Add("Nota_Pedido_CodNot", "Nota_Pedido_CodNot");
                tableMapping.ColumnMappings.Add("Producto_CodProd", "Producto_CodProd");
                tableMapping.ColumnMappings.Add("Precio", "Precio");
                tableMapping.ColumnMappings.Add("Cantidad", "Cantidad");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection = Connection;
                _adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Detalle_NotaPedido] ([Nota_Pedido_CodNot], [Producto_CodProd]," + " [Precio], [Cantidad]) VALUES (@Nota_Pedido_CodNot, @Producto_CodProd, @Precio, " + "@Cantidad)";

                _adapter.InsertCommand.CommandType = CommandType.Text;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Nota_Pedido_CodNot", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Nota_Pedido_CodNot", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Producto_CodProd", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Producto_CodProd", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Precio", SqlDbType.VarChar, 0, ParameterDirection.Input, 0, 0, "Precio", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Cantidad", SqlDbType.Int, 0, ParameterDirection.Input, 0, 0, "Cantidad", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitConnection()
            {
                _connection = new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString = My.MySettings.Default.MercaderConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection = new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0] = new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection = Connection;
                _commandCollection[0].CommandText = "SELECT Nota_Pedido_CodNot, Producto_CodProd, Precio, Cantidad FROM dbo.Detalle_No" + "taPedido";
                _commandCollection[0].CommandType = CommandType.Text;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(GeneralDS.Detalle_NotaPedidoDataTable dataTable)
            {
                Adapter.SelectCommand = CommandCollection[0];
                if (ClearBeforeFill == true)
                {
                    dataTable.Clear();
                }

                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual GeneralDS.Detalle_NotaPedidoDataTable GetData()
            {
                Adapter.SelectCommand = CommandCollection[0];
                var dataTable = new GeneralDS.Detalle_NotaPedidoDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS.Detalle_NotaPedidoDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(GeneralDS dataSet)
            {
                return Adapter.Update(dataSet, "Detalle_NotaPedido");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(int Nota_Pedido_CodNot, int Producto_CodProd, string Precio, int Cantidad)
            {
                Adapter.InsertCommand.Parameters[0].Value = Nota_Pedido_CodNot;
                Adapter.InsertCommand.Parameters[1].Value = Producto_CodProd;
                if (Precio is null)
                {
                    throw new ArgumentNullException("Precio");
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value = Precio;
                }

                Adapter.InsertCommand.Parameters[3].Value = Cantidad;
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State & ConnectionState.Open) != ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }

                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState == ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" + "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {
            private UpdateOrderOption _updateOrder;
            private ClienteTableAdapter _clienteTableAdapter;
            private Detalle_RemitoNVTableAdapter _detalle_RemitoNVTableAdapter;
            private Nota_PedidoTableAdapter _nota_PedidoTableAdapter;
            private Nota_VentaTableAdapter _nota_VentaTableAdapter;
            private ProductoTableAdapter _productoTableAdapter;
            private ProveedorTableAdapter _proveedorTableAdapter;
            private Tel_CliTableAdapter _tel_CliTableAdapter;
            private Tel_ProvTableAdapter _tel_ProvTableAdapter;
            private LocalidadTableAdapter _localidadTableAdapter;
            private Detalle_NotaVentaTableAdapter _detalle_NotaVentaTableAdapter;
            private Remito_NotaVentaTableAdapter _remito_NotaVentaTableAdapter;
            private Detalle_NotaPedidoTableAdapter _detalle_NotaPedidoTableAdapter;
            private bool _backupDataSetBeforeUpdate;
            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }

                set
                {
                    _updateOrder = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public ClienteTableAdapter ClienteTableAdapter
            {
                get
                {
                    return _clienteTableAdapter;
                }

                set
                {
                    _clienteTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public Detalle_RemitoNVTableAdapter Detalle_RemitoNVTableAdapter
            {
                get
                {
                    return _detalle_RemitoNVTableAdapter;
                }

                set
                {
                    _detalle_RemitoNVTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public Nota_PedidoTableAdapter Nota_PedidoTableAdapter
            {
                get
                {
                    return _nota_PedidoTableAdapter;
                }

                set
                {
                    _nota_PedidoTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public Nota_VentaTableAdapter Nota_VentaTableAdapter
            {
                get
                {
                    return _nota_VentaTableAdapter;
                }

                set
                {
                    _nota_VentaTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public ProductoTableAdapter ProductoTableAdapter
            {
                get
                {
                    return _productoTableAdapter;
                }

                set
                {
                    _productoTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public ProveedorTableAdapter ProveedorTableAdapter
            {
                get
                {
                    return _proveedorTableAdapter;
                }

                set
                {
                    _proveedorTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public Tel_CliTableAdapter Tel_CliTableAdapter
            {
                get
                {
                    return _tel_CliTableAdapter;
                }

                set
                {
                    _tel_CliTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public Tel_ProvTableAdapter Tel_ProvTableAdapter
            {
                get
                {
                    return _tel_ProvTableAdapter;
                }

                set
                {
                    _tel_ProvTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public LocalidadTableAdapter LocalidadTableAdapter
            {
                get
                {
                    return _localidadTableAdapter;
                }

                set
                {
                    _localidadTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public Detalle_NotaVentaTableAdapter Detalle_NotaVentaTableAdapter
            {
                get
                {
                    return _detalle_NotaVentaTableAdapter;
                }

                set
                {
                    _detalle_NotaVentaTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public Remito_NotaVentaTableAdapter Remito_NotaVentaTableAdapter
            {
                get
                {
                    return _remito_NotaVentaTableAdapter;
                }

                set
                {
                    _remito_NotaVentaTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" + "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" + "a", "System.Drawing.Design.UITypeEditor")]


            public Detalle_NotaPedidoTableAdapter Detalle_NotaPedidoTableAdapter
            {
                get
                {
                    return _detalle_NotaPedidoTableAdapter;
                }

                set
                {
                    _detalle_NotaPedidoTableAdapter = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }

                set
                {
                    _backupDataSetBeforeUpdate = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is object)
                    {
                        return _connection;
                    }

                    if (_clienteTableAdapter is object && _clienteTableAdapter.Connection is object)
                    {
                        return _clienteTableAdapter.Connection;
                    }

                    if (_detalle_RemitoNVTableAdapter is object && _detalle_RemitoNVTableAdapter.Connection is object)
                    {
                        return _detalle_RemitoNVTableAdapter.Connection;
                    }

                    if (_nota_PedidoTableAdapter is object && _nota_PedidoTableAdapter.Connection is object)
                    {
                        return _nota_PedidoTableAdapter.Connection;
                    }

                    if (_nota_VentaTableAdapter is object && _nota_VentaTableAdapter.Connection is object)
                    {
                        return _nota_VentaTableAdapter.Connection;
                    }

                    if (_productoTableAdapter is object && _productoTableAdapter.Connection is object)
                    {
                        return _productoTableAdapter.Connection;
                    }

                    if (_proveedorTableAdapter is object && _proveedorTableAdapter.Connection is object)
                    {
                        return _proveedorTableAdapter.Connection;
                    }

                    if (_tel_CliTableAdapter is object && _tel_CliTableAdapter.Connection is object)
                    {
                        return _tel_CliTableAdapter.Connection;
                    }

                    if (_tel_ProvTableAdapter is object && _tel_ProvTableAdapter.Connection is object)
                    {
                        return _tel_ProvTableAdapter.Connection;
                    }

                    if (_localidadTableAdapter is object && _localidadTableAdapter.Connection is object)
                    {
                        return _localidadTableAdapter.Connection;
                    }

                    if (_detalle_NotaVentaTableAdapter is object && _detalle_NotaVentaTableAdapter.Connection is object)
                    {
                        return _detalle_NotaVentaTableAdapter.Connection;
                    }

                    if (_remito_NotaVentaTableAdapter is object && _remito_NotaVentaTableAdapter.Connection is object)
                    {
                        return _remito_NotaVentaTableAdapter.Connection;
                    }

                    if (_detalle_NotaPedidoTableAdapter is object && _detalle_NotaPedidoTableAdapter.Connection is object)
                    {
                        return _detalle_NotaPedidoTableAdapter.Connection;
                    }

                    return null;
                }

                set
                {
                    _connection = value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    if (_clienteTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_detalle_RemitoNVTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_nota_PedidoTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_nota_VentaTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_productoTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_proveedorTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_tel_CliTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_tel_ProvTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_localidadTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_detalle_NotaVentaTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_remito_NotaVentaTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    if (_detalle_NotaPedidoTableAdapter is object)
                    {
                        count = count + 1;
                    }

                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private int UpdateUpdatedRows(GeneralDS dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_localidadTableAdapter is object)
                {
                    var updatedRows = dataSet.Localidad.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _localidadTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_clienteTableAdapter is object)
                {
                    var updatedRows = dataSet.Cliente.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _clienteTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_proveedorTableAdapter is object)
                {
                    var updatedRows = dataSet.Proveedor.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _proveedorTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_nota_VentaTableAdapter is object)
                {
                    var updatedRows = dataSet.Nota_Venta.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _nota_VentaTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_remito_NotaVentaTableAdapter is object)
                {
                    var updatedRows = dataSet.Remito_NotaVenta.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _remito_NotaVentaTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_nota_PedidoTableAdapter is object)
                {
                    var updatedRows = dataSet.Nota_Pedido.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _nota_PedidoTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_productoTableAdapter is object)
                {
                    var updatedRows = dataSet.Producto.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _productoTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_detalle_NotaVentaTableAdapter is object)
                {
                    var updatedRows = dataSet.Detalle_NotaVenta.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _detalle_NotaVentaTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_detalle_NotaPedidoTableAdapter is object)
                {
                    var updatedRows = dataSet.Detalle_NotaPedido.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _detalle_NotaPedidoTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_tel_ProvTableAdapter is object)
                {
                    var updatedRows = dataSet.Tel_Prov.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _tel_ProvTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_detalle_RemitoNVTableAdapter is object)
                {
                    var updatedRows = dataSet.Detalle_RemitoNV.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _detalle_RemitoNVTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                if (_tel_CliTableAdapter is object)
                {
                    var updatedRows = dataSet.Tel_Cli.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows = GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is object && 0 < updatedRows.Length)
                    {
                        result = result + _tel_CliTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }

                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private int UpdateInsertedRows(GeneralDS dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_localidadTableAdapter is object)
                {
                    var addedRows = dataSet.Localidad.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _localidadTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_clienteTableAdapter is object)
                {
                    var addedRows = dataSet.Cliente.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _clienteTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_proveedorTableAdapter is object)
                {
                    var addedRows = dataSet.Proveedor.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _proveedorTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_nota_VentaTableAdapter is object)
                {
                    var addedRows = dataSet.Nota_Venta.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _nota_VentaTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_remito_NotaVentaTableAdapter is object)
                {
                    var addedRows = dataSet.Remito_NotaVenta.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _remito_NotaVentaTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_nota_PedidoTableAdapter is object)
                {
                    var addedRows = dataSet.Nota_Pedido.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _nota_PedidoTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_productoTableAdapter is object)
                {
                    var addedRows = dataSet.Producto.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _productoTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_detalle_NotaVentaTableAdapter is object)
                {
                    var addedRows = dataSet.Detalle_NotaVenta.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _detalle_NotaVentaTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_detalle_NotaPedidoTableAdapter is object)
                {
                    var addedRows = dataSet.Detalle_NotaPedido.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _detalle_NotaPedidoTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_tel_ProvTableAdapter is object)
                {
                    var addedRows = dataSet.Tel_Prov.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _tel_ProvTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_detalle_RemitoNVTableAdapter is object)
                {
                    var addedRows = dataSet.Detalle_RemitoNV.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _detalle_RemitoNVTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                if (_tel_CliTableAdapter is object)
                {
                    var addedRows = dataSet.Tel_Cli.Select(null, null, DataViewRowState.Added);
                    if (addedRows is object && 0 < addedRows.Length)
                    {
                        result = result + _tel_CliTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }

                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private int UpdateDeletedRows(GeneralDS dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                if (_tel_CliTableAdapter is object)
                {
                    var deletedRows = dataSet.Tel_Cli.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _tel_CliTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_detalle_RemitoNVTableAdapter is object)
                {
                    var deletedRows = dataSet.Detalle_RemitoNV.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _detalle_RemitoNVTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_tel_ProvTableAdapter is object)
                {
                    var deletedRows = dataSet.Tel_Prov.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _tel_ProvTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_detalle_NotaPedidoTableAdapter is object)
                {
                    var deletedRows = dataSet.Detalle_NotaPedido.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _detalle_NotaPedidoTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_detalle_NotaVentaTableAdapter is object)
                {
                    var deletedRows = dataSet.Detalle_NotaVenta.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _detalle_NotaVentaTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_productoTableAdapter is object)
                {
                    var deletedRows = dataSet.Producto.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _productoTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_nota_PedidoTableAdapter is object)
                {
                    var deletedRows = dataSet.Nota_Pedido.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _nota_PedidoTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_remito_NotaVentaTableAdapter is object)
                {
                    var deletedRows = dataSet.Remito_NotaVenta.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _remito_NotaVentaTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_nota_VentaTableAdapter is object)
                {
                    var deletedRows = dataSet.Nota_Venta.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _nota_VentaTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_proveedorTableAdapter is object)
                {
                    var deletedRows = dataSet.Proveedor.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _proveedorTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_clienteTableAdapter is object)
                {
                    var deletedRows = dataSet.Cliente.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _clienteTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                if (_localidadTableAdapter is object)
                {
                    var deletedRows = dataSet.Localidad.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is object && 0 < deletedRows.Length)
                    {
                        result = result + _localidadTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }

                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null || updatedRows.Length < 1)
                {
                    return updatedRows;
                }

                if (allAddedRows is null || allAddedRows.Count < 1)
                {
                    return updatedRows;
                }

                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i < updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row) == false)
                    {
                        realUpdatedRows.Add(row);
                    }

                    i = i + 1;
                }

                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual int UpdateAll(GeneralDS dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }

                if (dataSet.HasChanges() == false)
                {
                    return 0;
                }

                if (_clienteTableAdapter is object && MatchTableAdapterConnection(_clienteTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_detalle_RemitoNVTableAdapter is object && MatchTableAdapterConnection(_detalle_RemitoNVTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_nota_PedidoTableAdapter is object && MatchTableAdapterConnection(_nota_PedidoTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_nota_VentaTableAdapter is object && MatchTableAdapterConnection(_nota_VentaTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_productoTableAdapter is object && MatchTableAdapterConnection(_productoTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_proveedorTableAdapter is object && MatchTableAdapterConnection(_proveedorTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_tel_CliTableAdapter is object && MatchTableAdapterConnection(_tel_CliTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_tel_ProvTableAdapter is object && MatchTableAdapterConnection(_tel_ProvTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_localidadTableAdapter is object && MatchTableAdapterConnection(_localidadTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_detalle_NotaVentaTableAdapter is object && MatchTableAdapterConnection(_detalle_NotaVentaTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_remito_NotaVentaTableAdapter is object && MatchTableAdapterConnection(_remito_NotaVentaTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                if (_detalle_NotaPedidoTableAdapter is object && MatchTableAdapterConnection(_detalle_NotaPedidoTableAdapter.Connection) == false)
                {
                    throw new ArgumentException("Todos los TableAdapters administrados por un TableAdapterManager deben usar la mi" + "sma cadena de conexión.");
                }

                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager no contiene información de conexión. Establezca cada propieda" + "d TableAdapterManager TableAdapter en una instancia TableAdapter válida.");
                }

                bool workConnOpened = false;
                if ((workConnection.State & ConnectionState.Broken) == ConnectionState.Broken)
                {
                    workConnection.Close();
                }

                if (workConnection.State == ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened = true;
                }

                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("La transacción no puede comenzar. La conexión de datos actual no es compatible co" + "n las transacciones o el estado actual no permite que comience la transacción.");
                }

                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet = new DataSet();
                    backupDataSet.Merge(dataSet);
                }

                try
                {
                    // ---- Prepare for update -----------
                    // 
                    if (_clienteTableAdapter is object)
                    {
                        revertConnections.Add(_clienteTableAdapter, _clienteTableAdapter.Connection);
                        _clienteTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _clienteTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_clienteTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _clienteTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_clienteTableAdapter.Adapter);
                        }
                    }

                    if (_detalle_RemitoNVTableAdapter is object)
                    {
                        revertConnections.Add(_detalle_RemitoNVTableAdapter, _detalle_RemitoNVTableAdapter.Connection);
                        _detalle_RemitoNVTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _detalle_RemitoNVTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_detalle_RemitoNVTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _detalle_RemitoNVTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_detalle_RemitoNVTableAdapter.Adapter);
                        }
                    }

                    if (_nota_PedidoTableAdapter is object)
                    {
                        revertConnections.Add(_nota_PedidoTableAdapter, _nota_PedidoTableAdapter.Connection);
                        _nota_PedidoTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _nota_PedidoTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_nota_PedidoTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _nota_PedidoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_nota_PedidoTableAdapter.Adapter);
                        }
                    }

                    if (_nota_VentaTableAdapter is object)
                    {
                        revertConnections.Add(_nota_VentaTableAdapter, _nota_VentaTableAdapter.Connection);
                        _nota_VentaTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _nota_VentaTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_nota_VentaTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _nota_VentaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_nota_VentaTableAdapter.Adapter);
                        }
                    }

                    if (_productoTableAdapter is object)
                    {
                        revertConnections.Add(_productoTableAdapter, _productoTableAdapter.Connection);
                        _productoTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _productoTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_productoTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _productoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_productoTableAdapter.Adapter);
                        }
                    }

                    if (_proveedorTableAdapter is object)
                    {
                        revertConnections.Add(_proveedorTableAdapter, _proveedorTableAdapter.Connection);
                        _proveedorTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _proveedorTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_proveedorTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _proveedorTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_proveedorTableAdapter.Adapter);
                        }
                    }

                    if (_tel_CliTableAdapter is object)
                    {
                        revertConnections.Add(_tel_CliTableAdapter, _tel_CliTableAdapter.Connection);
                        _tel_CliTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _tel_CliTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_tel_CliTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _tel_CliTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_tel_CliTableAdapter.Adapter);
                        }
                    }

                    if (_tel_ProvTableAdapter is object)
                    {
                        revertConnections.Add(_tel_ProvTableAdapter, _tel_ProvTableAdapter.Connection);
                        _tel_ProvTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _tel_ProvTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_tel_ProvTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _tel_ProvTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_tel_ProvTableAdapter.Adapter);
                        }
                    }

                    if (_localidadTableAdapter is object)
                    {
                        revertConnections.Add(_localidadTableAdapter, _localidadTableAdapter.Connection);
                        _localidadTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _localidadTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_localidadTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _localidadTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_localidadTableAdapter.Adapter);
                        }
                    }

                    if (_detalle_NotaVentaTableAdapter is object)
                    {
                        revertConnections.Add(_detalle_NotaVentaTableAdapter, _detalle_NotaVentaTableAdapter.Connection);
                        _detalle_NotaVentaTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _detalle_NotaVentaTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_detalle_NotaVentaTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _detalle_NotaVentaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_detalle_NotaVentaTableAdapter.Adapter);
                        }
                    }

                    if (_remito_NotaVentaTableAdapter is object)
                    {
                        revertConnections.Add(_remito_NotaVentaTableAdapter, _remito_NotaVentaTableAdapter.Connection);
                        _remito_NotaVentaTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _remito_NotaVentaTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_remito_NotaVentaTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _remito_NotaVentaTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_remito_NotaVentaTableAdapter.Adapter);
                        }
                    }

                    if (_detalle_NotaPedidoTableAdapter is object)
                    {
                        revertConnections.Add(_detalle_NotaPedidoTableAdapter, _detalle_NotaPedidoTableAdapter.Connection);
                        _detalle_NotaPedidoTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)workConnection;
                        _detalle_NotaPedidoTableAdapter.Transaction = (System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_detalle_NotaPedidoTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _detalle_NotaPedidoTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_detalle_NotaPedidoTableAdapter.Adapter);
                        }
                    }
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder == UpdateOrderOption.UpdateInsertDelete)
                    {
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result = result + UpdateInsertedRows(dataSet, allAddedRows);
                        result = result + UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }

                    result = result + UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }

                    if (0 < allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i = i + 1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is object);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0 < allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i < rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i = i + 1;
                        }
                    }

                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }

                    if (_clienteTableAdapter is object)
                    {
                        _clienteTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_clienteTableAdapter];
                        _clienteTableAdapter.Transaction = null;
                    }

                    if (_detalle_RemitoNVTableAdapter is object)
                    {
                        _detalle_RemitoNVTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_detalle_RemitoNVTableAdapter];
                        _detalle_RemitoNVTableAdapter.Transaction = null;
                    }

                    if (_nota_PedidoTableAdapter is object)
                    {
                        _nota_PedidoTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_nota_PedidoTableAdapter];
                        _nota_PedidoTableAdapter.Transaction = null;
                    }

                    if (_nota_VentaTableAdapter is object)
                    {
                        _nota_VentaTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_nota_VentaTableAdapter];
                        _nota_VentaTableAdapter.Transaction = null;
                    }

                    if (_productoTableAdapter is object)
                    {
                        _productoTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_productoTableAdapter];
                        _productoTableAdapter.Transaction = null;
                    }

                    if (_proveedorTableAdapter is object)
                    {
                        _proveedorTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_proveedorTableAdapter];
                        _proveedorTableAdapter.Transaction = null;
                    }

                    if (_tel_CliTableAdapter is object)
                    {
                        _tel_CliTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_tel_CliTableAdapter];
                        _tel_CliTableAdapter.Transaction = null;
                    }

                    if (_tel_ProvTableAdapter is object)
                    {
                        _tel_ProvTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_tel_ProvTableAdapter];
                        _tel_ProvTableAdapter.Transaction = null;
                    }

                    if (_localidadTableAdapter is object)
                    {
                        _localidadTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_localidadTableAdapter];
                        _localidadTableAdapter.Transaction = null;
                    }

                    if (_detalle_NotaVentaTableAdapter is object)
                    {
                        _detalle_NotaVentaTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_detalle_NotaVentaTableAdapter];
                        _detalle_NotaVentaTableAdapter.Transaction = null;
                    }

                    if (_remito_NotaVentaTableAdapter is object)
                    {
                        _remito_NotaVentaTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_remito_NotaVentaTableAdapter];
                        _remito_NotaVentaTableAdapter.Transaction = null;
                    }

                    if (_detalle_NotaPedidoTableAdapter is object)
                    {
                        _detalle_NotaPedidoTableAdapter.Connection = (System.Data.SqlClient.SqlConnection)revertConnections[_detalle_NotaPedidoTableAdapter];
                        _detalle_NotaPedidoTableAdapter.Transaction = null;
                    }

                    if (0 < adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i < adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate = true;
                            i = i + 1;
                        }
                    }
                }

                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is object)
                {
                    return true;
                }

                if (Connection is null || inputConnection is null)
                {
                    return true;
                }

                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }

                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public enum UpdateOrderOption
            {
                InsertUpdateDelete = 0,
                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {
                private DataRelation _relation;
                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation = relation;
                    if (childFirst)
                    {
                        _childFirst = -1;
                    }
                    else
                    {
                        _childFirst = 1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is object);
                    var root = row;
                    distance = 0;
                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row] = row;
                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);
                    while (parent is object && traversedRows.ContainsKey(parent) == false)
                    {
                        distance = distance + 1;
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(_relation, DataRowVersion.Default);
                    }

                    if (distance == 0)
                    {
                        traversedRows.Clear();
                        traversedRows[row] = row;
                        parent = row.GetParentRow(_relation, DataRowVersion.Original);
                        while (parent is object && traversedRows.ContainsKey(parent) == false)
                        {
                            distance = distance + 1;
                            root = parent;
                            traversedRows[parent] = parent;
                            parent = parent.GetParentRow(_relation, DataRowVersion.Original);
                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }

                    if (row1 is null)
                    {
                        return -1;
                    }

                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);
                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);
                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst * distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is object && root2.Table is object);
                        if (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}